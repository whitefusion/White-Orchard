{"title":"Javascript: Types, Values and Variables","date":"2018-06-18T15:44:07.000Z","excerpt":"","slug":"types-values-variables-1","comments":true,"tags":["core","language","note","javascript"],"updated":"2018-06-19T13:21:43.383Z","content":"<blockquote>\n<p>This is the reading note for “ Chapter 3: Overview, Javascript: The definitive guide 5th edition”. <br></p>\n</blockquote>\n<p>Javascript types can be divided into two categories: <strong>primitive</strong> types and <strong>object</strong> types. The primitive types include numbers, strings of text and boolean truth values. <br></p>\n<p>The special Javascript <strong>types</strong> and <strong>values</strong> are <em>null</em> and <em>undefined</em>. Each value is typically considered to be the sole number of its own special type. <br></p>\n<p>Any Javascript value that is not a number, a string, a boolean or null or undefined is an <strong>object</strong>. <br></p>\n<p>An ordinary Javascript object is an <strong>unordered</strong> collection of named values. <em>Array</em> is a special kind of object which is an ordered collection of numbered values. <br>.</p>\n<p><em>function</em> is another special kind of object. The most important thing about functions in JS is that they are true values and that JS programs can treat them like regular objects. <br></p>\n<p>Functions that are written to be used to initialize a newly created object are known as <em>constructor</em>. Each constructor defines a <em>class</em> of objects. Classes can be thought of as subtypes of the object type. Core JS defines three other useful classes: <em>Date</em>, <em>RegExp</em> and <em>Error</em>. <br></p>\n<p>The Javascript interpreter performs automatic garbage collection for memory management. When an object is no longer reachable - when a program no longer has any way to refer to it - the interperter knows it can never be used again and automatically reclaims the memory it was occupying. <br></p>\n<p>Javascript is an object-oriented language. It means that rather than having globally defined functions to operate on values of various types, the types themselves define methods for working with values. Technically, it is only Javascript objects that have methods. But numbers, strings and boolean values behave as if they had methods. In JS, <em>null</em> and <em>undefined</em> are the only values that methods cannot be invoked on. <br></p>\n<p>JS types can also be categorized as mutable and immutable types. <em>Objects</em> and <em>arrays</em> are mutable. <em>Numbers</em>, <em>booleans</em>, <em>strings</em>, <em>null</em> and <em>undefined</em> are immutable. For <em>strings</em>, one can access the text at any index of a string, but JS provides no way to alter the text of an existing string. <br></p>\n<p>JS converts values liberally from one type to another. If a program expects a <em>string</em>, for example, and you give it a <em>number</em>, it will automatically convert the <em>number</em> to a <em>string</em> for you. <br></p>\n<p>JS variables are <strong>untyped</strong>. JS uses <em>lexical scoping</em>. Variables declared outside of a function are <em>global variables</em> and are visible everywhere in a JS program. Variables declared inside a function have <em>function scope</em> and are visible only to code that appears inside that function. </p>\n","prev":{"title":"Python: How do we run Python program","slug":"How-do-we-run-Python-program"},"next":{"title":"Javascript: Lexical Structure","slug":"Lexical-Structure"},"link":"https://whitefusion.github.io/post/types-values-variables-1"}
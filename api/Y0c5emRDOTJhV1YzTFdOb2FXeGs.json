{"title":"Angular ViewChild","date":"2019-02-23T09:37:58.000Z","excerpt":"","slug":"view-child","comments":true,"tags":["Angular"],"categories":["Frontend"],"updated":"2019-02-23T09:41:03.739Z","content":"<h1 id=\"ViewChild\"><a href=\"#ViewChild\" class=\"headerlink\" title=\"ViewChild\"></a>ViewChild</h1><p><code>@ViewChild</code> is a decorator used for referring elements in a component template. <br></p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ViewChild</span>( selector, &#123;read: typeToken&#125; ) sample: sampleType</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>selectors</strong></p>\n<ul>\n<li>any class with the <code>@Component</code> and <code>@Directive</code> decorator</li>\n<li>tempalte reference</li>\n<li>provider</li>\n<li>TemplateRef (<code>ng-template</code>)</li>\n</ul>\n</li>\n<li><p><strong>read</strong>: read a different token from the queried elements</p>\n</li>\n</ul>\n<p>The change detector looks for the first element or the directive matching the selector in the view DOM. If the view DOM changes, and a new child matches the selector, the property is updated. <br></p>\n<p>If we want to write component initialization code that uses the references injected <code>@ViewChild</code>, we need to do it inside the <code>AfterViewInit</code> lifecycle hook. <br></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> #<span class=\"attr\">title</span>&gt;</span>Choose Brand Colors:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">color-sample</span> [<span class=\"attr\">color</span>]=<span class=\"string\">\"primary\"</span> #<span class=\"attr\">primaryColorSample</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">color-sample</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mat-input-container</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mat-label</span>&gt;</span>Primary Color<span class=\"tag\">&lt;/<span class=\"name\">mat-label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">matInput</span> #<span class=\"attr\">primaryInput</span> [(<span class=\"attr\">colorPicker</span>)]=<span class=\"string\">\"primary\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"primary\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mat-input-container</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The webpage looks like this: </p>\n<p><img src=\"../images/web_page.png\" alt=\"web_page\"></p>\n<p>Refer the <code>&lt;color-sample&gt;</code> instance with <code>@ViewChild</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  .....</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(ColorSampleComponent)</span><br><span class=\"line\">  primarySampleComponent: ColorSampleComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Values on ngAfterViewInit():'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"primaryColorSample:\"</span>, <span class=\"keyword\">this</span>.primarySampleComponent);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Print result: </p>\n<p><img src=\"../images/output1.png\" alt=\"output1\"></p>\n<p>Refer title:<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span>  AfterViewInit &#123;</span><br><span class=\"line\">  .....</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'title'</span>)</span><br><span class=\"line\">  title: ElementRef;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Values on ngAfterViewInit():'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"title:\"</span>, <span class=\"keyword\">this</span>.title.nativeElement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>print result:</p>\n<p><img src=\"../images/output2.png\" alt=\"output2\"></p>\n<p>We can see the <code>ElementRef</code> simply Wrap reference to the native DOM element. <br></p>\n<p>Using the <code>nativeElement</code> property, we can now apply any native DOM operation to the <code>h2</code> title tag, such as for example <code>addEventListener()</code>.  <br></p>\n<p>Refer <code>&lt;color-sample&gt;</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span>  AfterViewInit &#123;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'primaryColorSample'</span>)</span><br><span class=\"line\">  sample: ColorSampleComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Values on ngAfterViewInit():'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sample:\"</span>, <span class=\"keyword\">this</span>.sample);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output: </p>\n<p><img src=\"../images/output3.png\" alt=\"output3\"></p>\n<p>Default behavior of <code>@ViewChild</code> injection by template reference</p>\n<ul>\n<li>When injecting a reference applied to a component, we get back the component instance</li>\n<li>When injecting a reference tot a plain HTML element, we get back the corresponding wrapped DOM element</li>\n</ul>\n<h3 id=\"Read-property\"><a href=\"#Read-property\" class=\"headerlink\" title=\"Read property\"></a>Read property</h3><p>If we want to get the DOM element of <code>&lt;color-sample&gt;</code>:<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span>  AfterViewInit &#123;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'primaryColorSample'</span>, &#123;read: ElementRef&#125;)</span><br><span class=\"line\">  sample: ElementRef;</span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterViewInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Values on ngAfterViewInit():'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sample:\"</span>, <span class=\"keyword\">this</span>.sample.nativeElement);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/output4.png\" alt=\"output4\"></p>\n<p>Let’s try open the color picker when the color sample gets clicked.  <br><br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 #title&gt;Choose Brand Colors:&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;color-sample [color]=\"primary\" #primaryColorSample (click)=\"openColorPicker()\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>color-sample&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mat-input-container&gt;</span><br><span class=\"line\">  &lt;mat-label&gt;Primary Color&lt;<span class=\"regexp\">/mat-label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input matInput #primaryInput [(colorPicker)]=\"primary\" [(ngModel)]=\"primary\"/</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/mat-input-container&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">  selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"string\">'./app.component.html'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\">  primary = <span class=\"string\">'#1976d2'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'primaryInput'</span>, &#123;read: ColorPickerDirective&#125;)</span><br><span class=\"line\">  colorPicker: ColorPickerDirective;</span><br><span class=\"line\"></span><br><span class=\"line\">  openColorPicker() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colorPicker.openDialog();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><p><a href=\"https://blog.angular-university.io/angular-viewchild/\" target=\"_blank\" rel=\"noopener\">Angular @ViewChild: In-Depth Explanation</a> <br><br><a href=\"https://angular.io/api/core/ViewChild\" target=\"_blank\" rel=\"noopener\">Angular ViewChild</a> <br><br><a href=\"https://github.com/angular-university/angular-viewchild-examples\" target=\"_blank\" rel=\"noopener\">GitHub - Angular-ViewChild-Example</a></p>\n","next":{"title":"js-scripted-http","slug":"js-scripted-http"},"link":"https://whitefusion.github.io/post/view-child"}
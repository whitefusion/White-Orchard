{"title":"01 Package problem","date":"2018-06-02T11:56:01.000Z","excerpt":"","slug":"Package-problem","comments":true,"tags":["c++","dp"],"categories":["algorithm"],"updated":"2018-06-25T14:30:58.585Z","content":"<p>实例原帖：<a href=\"http://techieme.in/solving-01-knapsack-problem-using-dynamic-programming/\" target=\"_blank\" rel=\"noopener\">Solving 0/1 knapsack problem</a></p>\n<p>《背包九讲》没有实例无法真正理解，所以找了实例与大家分享。</p>\n<hr>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><blockquote>\n<p>你的背包容量为 Capacity, 现在有n个物品，物品重量 w[n], 物品价值 v[n]。如何选择物品价值最大？</p>\n</blockquote>\n<p>特点：每种物品仅有一件，可以选择放或不放, 即01.</p>\n<p>实例输入：背包承重量10，有5件物品，重量[2,3,3,4,6], 价值[1,2,5,9,4].</p>\n<h2 id=\"动态规划表格\"><a href=\"#动态规划表格\" class=\"headerlink\" title=\"动态规划表格\"></a>动态规划表格</h2><p><img src=\"../images/01_package.png\" alt=\"01_package\"></p>\n<h3 id=\"表格说明\"><a href=\"#表格说明\" class=\"headerlink\" title=\"表格说明\"></a>表格说明</h3><ul>\n<li>第一行： 表示最大允许重量 0 ～ 10。<ul>\n<li>比如7那一列 表示我们将背包的最大承重量当作7来求解。</li>\n</ul>\n</li>\n<li>第一列： 表示物品的 重量（价值）。<ul>\n<li>比如第四行 3（5）： 我们只考虑物品集合{ 2(1)，3(2)，3(5)}，剩下的 4（9），6（4） 当做不存在。</li>\n</ul>\n</li>\n<li>表格中具体某一个数，表示当前行列条件下能获取的最大价值。<ul>\n<li>比如第五行=4（9）第八列=6， 意味着当背包最大承重量为6，从 2（1），3（2），3（5），4（9）中挑选物品可以获取的最大价值，即10.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"如何生成表格\"><a href=\"#如何生成表格\" class=\"headerlink\" title=\"如何生成表格\"></a>如何生成表格</h3><p>比如最大承重量为5，第三行只考虑2（1），3（2）的情况：</p>\n<ul>\n<li>如果不拿3（2）， 那么获取的价值可以从上一行得到，即只有2（1）的情况，结果为1.</li>\n<li>如果拿3（2），那么获取的价值为 2 + 最大承重量为(5-3)=2的时候拿除了3（2）的物品能获得的最大价值，这个数值能从上一行最大承重2的那列获取，结果为3.</li>\n</ul>\n<p>综上，应该拿3（2），最大价值为3.</p>\n<h3 id=\"转换关系\"><a href=\"#转换关系\" class=\"headerlink\" title=\"转换关系\"></a>转换关系</h3><p>第i行，j列的数值应该等于： max (dp[i-1][j], v[i]+ dp[i-1][j-w[i]])</p>\n<p>##代码##</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Input</span></span><br><span class=\"line\"><span class=\"comment\">// 5(n) 10(capacity)</span></span><br><span class=\"line\"><span class=\"comment\">// 1 2 5 9 4 (v[n])</span></span><br><span class=\"line\"><span class=\"comment\">// 2 3 3 4 6 (w[n])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxValue</span> <span class=\"params\">(<span class=\"keyword\">int</span> n , <span class=\"keyword\">int</span> c , <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> **dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>*[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[c+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt;= c; j++)</span><br><span class=\"line\">            dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Populate the first row</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt;= c ; j++)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] += j &gt;= w[<span class=\"number\">0</span>] ? v[<span class=\"number\">0</span>] : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Populate the rest</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; n; i++ )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= c; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;w[i]) dp[i][j] = dp[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> dp[i][j] = max(v[i]+dp[i<span class=\"number\">-1</span>][j-w[i]], dp[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>][c];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, capa = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; capa;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; values(n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; weights(n,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; values[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; weights[j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; maxValue (n,capa,values,weights) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化解法\"><a href=\"#优化解法\" class=\"headerlink\" title=\"优化解法\"></a>优化解法</h3><p>以上方法的空间效率为O(n*c)，还有一个优化空间效率到O(c)的方法。<br><br>原理是我们发现每次更新一个表格cell的时候实际上只用到前一行和当前行，所以只要用一个O(c)大小的数列去维护就可以了。<br><br>需要注意的是，如果从前往后遍历更新的话那么前一行的数据就会被本行的数据覆盖了，所以应该从后往前遍历。<br></p>\n<h3 id=\"优化解法代码\"><a href=\"#优化解法代码\" class=\"headerlink\" title=\"优化解法代码\"></a>优化解法代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxValue</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> c, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[c+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= c; ++i)</span><br><span class=\"line\">        dp[i] = i &gt;= w[<span class=\"number\">0</span>] ? v[<span class=\"number\">0</span>] : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c; j &gt;= <span class=\"number\">0</span>; --j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &gt;= w[i])</span><br><span class=\"line\">                dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[c];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>, capa = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; capa;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; values(n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; weights(n,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; values[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; weights[j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; maxValue(n,capa, values, weights) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"延伸：物品能重复拿\"><a href=\"#延伸：物品能重复拿\" class=\"headerlink\" title=\"延伸：物品能重复拿\"></a>延伸：物品能重复拿</h3><p>上面的题之所以要从后往前遍历其实就是为了避免重复，所以能重复拿的情况就只要从前往后遍历就可以了。</p>\n","prev":{"title":"Angular: Typescript","slug":"Typescript"},"next":{"title":"Python: How do python run programs","slug":"How-do-python-run-programs"},"link":"https://whitefusion.github.io/post/Package-problem"}
{"title":"Python: Introducing python object types","date":"2018-07-02T14:52:03.000Z","excerpt":"","slug":"introducing-python-object-types","comments":true,"tags":["python","note"],"categories":["language core"],"updated":"2018-07-07T03:52:05.573Z","content":"<blockquote>\n<p>This is the reading note for “Chapter 4: Introducing Python Object Types, Learning python 5th edition”. </p>\n</blockquote>\n<p>Everything is an object in a Python script. <br></p>\n<p>Python programs can be decomposed into <em>modules</em>, <em>statements</em>, <em>expressions</em> and <em>objects</em>:</p>\n<ul>\n<li>Programs are composed of moudles.</li>\n<li>Modules contain statements.</li>\n<li>Statements contain expressions.</li>\n<li>Expressions create and process objects.</li>\n</ul>\n<h2 id=\"Core-data-types\"><a href=\"#Core-data-types\" class=\"headerlink\" title=\"Core data types\"></a>Core data types</h2><p><img src=\"../images/built_in_types.png\" alt=\"built_in_types\"></p>\n<p>The built-in types are often more efficient, they employ already optimized data structure algorithms that are implemented in C for speed. <br><br>Program units such as functions, modules and classes are objects in Python. They are created with statements and expressions such as <code>def</code>, <code>class</code>, <code>import</code> and <code>lambda</code>. <br><br>There are no type declarations in Python, the syntax of the expressions you run determines the types of objects you create and use. Once you craete an object, you bind its operation set for all time - you can perform only string operations on a string and list operations on a list. This means that Python is dynamically typed, a model that keeps track of types for you automatically instead of requiring declaration code, but it is also <strong>strongly typed</strong>, a constraint that means you can perform on an object only operations that are valid for its type. <br></p>\n<h2 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h2><p>Python’s core objects set includes the usual suspects: <em>integers</em> that have no fractional part, <em>floating-point</em> numbers that do, and more exotic types - <em>complex</em> numbers with imaginary parts, <em>decimals</em> with fixed precision, <em>rationals</em> with numberator and denominator, and full-featured <em>sets</em>. </p>\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><p>Strings are sequences of one-character strings; other, more general sequence types include <em>lists</em> and <em>tuples</em>.  <br></p>\n<p>Sequence operations have <em>indexing</em> expressions like <code>len(s)</code>, <code>s[0]</code> and <code>s[-1]</code>. <br><br>In addition to simple positional indexing, sequences also support a more general form of indexing knowns as <em>slicing</em>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'spam'</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\"># give me everything from 1 up to but not including 3</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>:] <span class=\"comment\"># the right bound defaults to the length of the sequence being sliced</span></span><br><span class=\"line\">s[:<span class=\"number\">3</span>] <span class=\"comment\"># the left bound defaults to zero</span></span><br><span class=\"line\">s[:<span class=\"number\">-1</span>] <span class=\"comment\"># equal to [0:-1]</span></span><br></pre></td></tr></table></figure></p>\n<p>As sequence, string also support <em>concatenation</em> and <em>repetition</em>.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s+<span class=\"string\">'xyz'</span> <span class=\"comment\"># 'spamxyz'</span></span><br><span class=\"line\">s*<span class=\"number\">8</span> <span class=\"comment\"># repeat 0 times</span></span><br></pre></td></tr></table></figure></p>\n<p>The string is immutable. <em>numbers</em> , <em>strings</em> and <em>tuples</em> are immutable. <em>lists</em>, <em>dictionaries</em> and <em>sets</em> are mutable. <br></p>\n<p>Strictly speaking, you can change text-based data in place if you either expand it into a <em>list</em> of individual chars and join it back together with nothing between, or use the newer <code>bytearray</code> type. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cast to list</span></span><br><span class=\"line\">s = <span class=\"string\">'abc'</span></span><br><span class=\"line\">L = list(s)</span><br><span class=\"line\"><span class=\"string\">''</span>.join(L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># convert to byte array</span></span><br><span class=\"line\">B = bytearray(<span class=\"string\">b'spam'</span>)</span><br><span class=\"line\">B.extend(<span class=\"string\">b'eggs'</span>)</span><br><span class=\"line\">B.decode()</span><br></pre></td></tr></table></figure>\n<p>The <code>bytearray</code> supports in-place chagnes for text, but only for text whose chars are all at most 8-bits wide. </p>\n<p>String also comes with other type-specific methods like <code>find()</code>, <code>replace()</code>, <code>split()</code>, <code>rstrip()</code>. Advanced substitution operation known as <em>formatting</em>. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'Spam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S.find(<span class=\"string\">'pa'</span>)                 <span class=\"comment\"># Find the offset of a substring in S</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S</span><br><span class=\"line\"><span class=\"string\">'Spam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S.replace(<span class=\"string\">'pa'</span>, <span class=\"string\">'XYZ'</span>)       <span class=\"comment\"># Replace occurrences of a string in S with another</span></span><br><span class=\"line\"><span class=\"string\">'SXYZm'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S</span><br><span class=\"line\"><span class=\"string\">'Spam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line = <span class=\"string\">'aaa,bbb,ccccc,dd'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line.split(<span class=\"string\">','</span>)              <span class=\"comment\"># Split on a delimiter into a list of substrings</span></span><br><span class=\"line\">[<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>, <span class=\"string\">'ccccc'</span>, <span class=\"string\">'dd'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'spam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S.upper()                    <span class=\"comment\"># Upper- and lowercase conversions</span></span><br><span class=\"line\"><span class=\"string\">'SPAM'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S.isalpha()                  <span class=\"comment\"># Content tests: isalpha, isdigit, etc.</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line = <span class=\"string\">'aaa,bbb,ccccc,dd\\n'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line.rstrip()                <span class=\"comment\"># Remove whitespace characters on the right side</span></span><br><span class=\"line\"><span class=\"string\">'aaa,bbb,ccccc,dd'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line.rstrip().split(<span class=\"string\">','</span>)     <span class=\"comment\"># Combine two operations</span></span><br><span class=\"line\">[<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>, <span class=\"string\">'ccccc'</span>, <span class=\"string\">'dd'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'%s, eggs, and %s'</span> % (<span class=\"string\">'spam'</span>, <span class=\"string\">'SPAM!'</span>)</span><br><span class=\"line\"><span class=\"string\">'spam, eggs, and SPAM!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'&#123;&#125;, eggs, and &#123;&#125;'</span>.format(<span class=\"string\">'spam'</span>, <span class=\"string\">'SPAM!'</span>)</span><br><span class=\"line\"><span class=\"string\">'spam, eggs, and SPAM!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'&#123;:,.2f&#125;'</span>.format(<span class=\"number\">296999.2567</span>) </span><br><span class=\"line\"><span class=\"string\">'296,999.26'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'%.2f | %+05d'</span> % (<span class=\"number\">3.14159</span>, <span class=\"number\">-42</span>)</span><br><span class=\"line\"><span class=\"string\">'3.14 | -0042'</span></span><br></pre></td></tr></table></figure>\n<p>One note here: although sequence operations are generic, methods are not. As a rule of thumb, Python’s toolset is layered: generic operations that span multiple types show up as built-in functions or expressions (e.g. <code>len(X)</code>, <code>X[0]</code>), but type-specific operations are method calls (e.g. <code>aString.upper()</code>). </p>\n<p>Python provide us a variety of ways for us to code strings. For instance, special characters can be represented as backslash escape sequences, which Python displays in <code>\\xNN</code> hexadecimal escape notation, unless they represent printable characters. So if a <code>\\xNN</code> appears, that means the chars are not printable. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'A\\nB\\tC'</span>            <span class=\"comment\"># \\n is end-of-line, \\t is tab</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(S)                   <span class=\"comment\"># Each stands for just one character</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ord(<span class=\"string\">'\\n'</span>)                <span class=\"comment\"># \\n is a byte with the binary value 10 in ASCII</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'A\\0B\\0C'</span>            <span class=\"comment\"># \\0, a binary zero byte, does not terminate string</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(S)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S                        <span class=\"comment\"># Non-printables are displayed as \\xNN hex escapes</span></span><br><span class=\"line\"><span class=\"string\">'a\\x00B\\x00C'</span></span><br></pre></td></tr></table></figure>\n<p>We can also use <code>triple quotes</code> , all the lines are concatenated together, and end-of-line characters are added where line breaks appear.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>msg = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">aaaaaaaaaaaaa</span></span><br><span class=\"line\"><span class=\"string\">bbb'''bbbbbbbbbb\"\"bbbbbbb'bbbb</span></span><br><span class=\"line\"><span class=\"string\">cccccccccccccc</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>msg</span><br><span class=\"line\"><span class=\"string\">'\\naaaaaaaaaaaaa\\nbbb\\'\\'\\'bbbbbbbbbb\"\"bbbbbbb\\'bbbb\\ncccccccccccccc\\n'</span></span><br></pre></td></tr></table></figure></p>\n<p>Python also supports a <em>raw</em> string literal that turns off the backslash escape mechanism. (e.g. <code>r&#39;C:\\text\\new&#39;</code>)</p>\n<h3 id=\"Unicode-strings\"><a href=\"#Unicode-strings\" class=\"headerlink\" title=\"Unicode strings\"></a>Unicode strings</h3><p>Python strings come with full <em>Unicode</em> support. Characters in the Japanese and Russian alphabets, for example, are outside the ASCII set. A distinct <strong>bytes</strong> string type represents raw byte values. Formally, in both 2.X and 3.X, non-Unicode strings are sequences of <em>8-bit bytes</em> that print with ASCII characters when possible, and Unicode strings sequences of <em>Unicode code points</em> - identifying numbers for characters, which do not necessary map to single bytes when encoded to files or stored in memory. <br></p>\n<p>Both 3.X and 2.X also support coding non-ASCII characters with \\x hexadecimal and short \\u and long \\U Unicode escapes.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># code non-ASCII character coded in three ways</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'sp\\xc4\\u00c4\\U000000c4m'</span></span><br><span class=\"line\"><span class=\"string\">'spÄÄÄm'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Python 3.X has a tighter model that never allows its normal and byte strings to mix without explicit conversion. </span></span><br><span class=\"line\"><span class=\"string\">u'x'</span> + <span class=\"string\">b'y'</span>            <span class=\"comment\"># Fails in 3.3 (where u is optional and ignored)</span></span><br><span class=\"line\"><span class=\"string\">u'x'</span> + <span class=\"string\">'y'</span>             <span class=\"comment\"># Works in 3.3: 'xy'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span> + <span class=\"string\">b'y'</span>.decode()    <span class=\"comment\"># Works in 3.X if decode bytes to str: 'xy'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.encode() + <span class=\"string\">b'y'</span>    <span class=\"comment\"># Works in 3.X if encode str to bytes: b'xy'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the unicode code points are the same as encoded hexidecimal byte code.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'\\u00A3'</span>, <span class=\"string\">'\\u00A3'</span>.encode(<span class=\"string\">'latin1'</span>), <span class=\"string\">b'\\xA3'</span>.decode(<span class=\"string\">'latin1'</span>)</span><br><span class=\"line\">(<span class=\"string\">'£'</span>, <span class=\"string\">b'\\xa3'</span>, <span class=\"string\">'£'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Unicode processing mostly reduces to transterring text data to and from files - text is encoded to bytes when stored in a file, and decoded into characters when read back into memories. </p>\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><p>Lists are positionally ordered collections of arbitrarily typed objects, and they have no fixed size. They are mutable. They support all sequence operations (indexing, slicing, concatenating, repeat). Sequence operations does not change original list. They have type-specific operations like <code>append(), pop(), insert(), remove(), extend(), sort(), reverse()</code>. Lists do not allow reference items that are not present. It reports a index error. List allows nesting which are good for matrixes.  <br><br>A more advance operation supported is called <em>list comprehension</em>.<br>It can be used to iterate over any <strong>iterable object</strong>.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>diag = [M[i][i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]]      <span class=\"comment\"># Collect a diagonal from matrix</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>diag</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubles = [c * <span class=\"number\">2</span> <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> <span class=\"string\">'spam'</span>]        <span class=\"comment\"># Repeat characters in a string</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubles</span><br><span class=\"line\">[<span class=\"string\">'ss'</span>, <span class=\"string\">'pp'</span>, <span class=\"string\">'aa'</span>, <span class=\"string\">'mm'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Lists, sets, dictionaries and generators can all be built with comprehensions</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[ord(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'spaam'</span>]                <span class=\"comment\"># List of character ordinals</span></span><br><span class=\"line\">[<span class=\"number\">115</span>, <span class=\"number\">112</span>, <span class=\"number\">97</span>, <span class=\"number\">97</span>, <span class=\"number\">109</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;ord(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'spaam'</span>&#125;                <span class=\"comment\"># Sets remove duplicates</span></span><br><span class=\"line\">&#123;<span class=\"number\">112</span>, <span class=\"number\">97</span>, <span class=\"number\">115</span>, <span class=\"number\">109</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;x: ord(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'spaam'</span>&#125;             <span class=\"comment\"># Dictionary keys are unique</span></span><br><span class=\"line\">&#123;<span class=\"string\">'p'</span>: <span class=\"number\">112</span>, <span class=\"string\">'a'</span>: <span class=\"number\">97</span>, <span class=\"string\">'s'</span>: <span class=\"number\">115</span>, <span class=\"string\">'m'</span>: <span class=\"number\">109</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(ord(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'spaam'</span>)                <span class=\"comment\"># Generator of values</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x000000000254DAB0</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dictionaries\"><a href=\"#Dictionaries\" class=\"headerlink\" title=\"Dictionaries\"></a>Dictionaries</h2><p>They are known as <em>mappings</em>. They store objects by key instead of by relative position. Mappings don’t maintain any reliable left-to-right order. We can make dictionaries by passing to the <code>dict</code> type name either <em>keyword arguments</em> or the result of <em>zipping</em> together sequences of keys and values obtained at runtime.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bob1 = dict(name=<span class=\"string\">'Bob'</span>, job=<span class=\"string\">'dev'</span>, age=<span class=\"number\">40</span>)                      <span class=\"comment\"># Keywords</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bob1</span><br><span class=\"line\">&#123;<span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'dev'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bob2 = dict(zip([<span class=\"string\">'name'</span>, <span class=\"string\">'job'</span>, <span class=\"string\">'age'</span>], [<span class=\"string\">'Bob'</span>, <span class=\"string\">'dev'</span>, <span class=\"number\">40</span>]))    <span class=\"comment\"># Zipping</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bob2</span><br><span class=\"line\">&#123;<span class=\"string\">'job'</span>: <span class=\"string\">'dev'</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">40</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Missing keys are a situation need to be take care of. We can use <code>in</code>, <code>get</code> or <code>if</code> to get rid of it.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>value = D.get(<span class=\"string\">'x'</span>, <span class=\"number\">0</span>)                      <span class=\"comment\"># Index but with a default</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>value</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>value = D[<span class=\"string\">'x'</span>] <span class=\"keyword\">if</span> <span class=\"string\">'x'</span> <span class=\"keyword\">in</span> D <span class=\"keyword\">else</span> <span class=\"number\">0</span>          <span class=\"comment\"># if/else expression form</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>value</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>The <code>sorted</code> call returns the result and sorts a variety of object types, like<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>D</span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sorted(D):</span><br><span class=\"line\">        print(key, <span class=\"string\">'=&gt;'</span>, D[key])</span><br><span class=\"line\">a =&gt; 1</span><br><span class=\"line\">b =&gt; 2</span><br><span class=\"line\">c =&gt; 3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tuples\"><a href=\"#Tuples\" class=\"headerlink\" title=\"Tuples\"></a>Tuples</h2><p>They are immutable and used to represent fixed collections of items. Syntactically, they are normally coded in parentheses instead of square brackets, and they support arbitrary types, arbitrary nesting, and the usual sequence opeartion.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T = <span class=\"string\">'spam'</span>, <span class=\"number\">3.0</span>, [<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T[<span class=\"number\">2</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>T.append(<span class=\"number\">4</span>)</span><br><span class=\"line\">AttributeError: <span class=\"string\">'tuple'</span> object has no attribute <span class=\"string\">'append'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><p>To create a file object, you call the built-in <code>open</code> function like:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'w'</span>)      <span class=\"comment\"># Make a new file in output mode ('w' is write)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(<span class=\"string\">'Hello\\n'</span>)             <span class=\"comment\"># Write strings of characters to it</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(<span class=\"string\">'world\\n'</span>)             <span class=\"comment\"># Return number of items written in Python 3.X</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()                      <span class=\"comment\"># Close to flush output buffers to disk</span></span><br></pre></td></tr></table></figure></p>\n<p>The best way to read a line today is not read it at all - file provide an iterator that automatically reads line by line in <code>for</code> loops an other contexts.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> open(<span class=\"string\">'data.txt'</span>): print(line)</span><br></pre></td></tr></table></figure></p>\n<p>Python 3.X draws a sharp distinction between text and binary data in files: text files represent content as normal <code>str</code> strings and perform Unicode encoding and decoding automatically when writing and reading data, while binary files represent content as a special <code>bytes</code> string and allow you to access file content unaltered. <em>binary files</em> are useful for processing media, accessing data created by C programs and so on. Python’s <code>struct</code> module can both create and unpack packed <em>binary data</em>.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>packed = struct.pack(<span class=\"string\">'&gt;i4sh'</span>, <span class=\"number\">7</span>, <span class=\"string\">b'spam'</span>, <span class=\"number\">8</span>)     <span class=\"comment\"># Create packed binary data</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>packed                                           <span class=\"comment\"># 10 bytes, not objects or text</span></span><br><span class=\"line\"><span class=\"string\">b'\\x00\\x00\\x00\\x07spam\\x00\\x08'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file = open(<span class=\"string\">'data.bin'</span>, <span class=\"string\">'wb'</span>)                    <span class=\"comment\"># Open binary output file</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file.write(packed)                               <span class=\"comment\"># Write packed binary data</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data = open(<span class=\"string\">'data.bin'</span>, <span class=\"string\">'rb'</span>).read()              <span class=\"comment\"># Open/read binary data file</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data                                              <span class=\"comment\"># 10 bytes, unaltered</span></span><br><span class=\"line\"><span class=\"string\">b'\\x00\\x00\\x00\\x07spam\\x00\\x08'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data[<span class=\"number\">4</span>:<span class=\"number\">8</span>]                                         <span class=\"comment\"># Slice bytes in the middle</span></span><br><span class=\"line\"><span class=\"string\">b'spam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(data)                                        <span class=\"comment\"># A sequence of 8-bit bytes</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">115</span>, <span class=\"number\">112</span>, <span class=\"number\">97</span>, <span class=\"number\">109</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>struct.unpack(<span class=\"string\">'&gt;i4sh'</span>, data)                      <span class=\"comment\"># Unpack into objects again</span></span><br><span class=\"line\">(<span class=\"number\">7</span>, <span class=\"string\">b'spam'</span>, <span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure></p>\n<p>To access files containing non-ASCII Unicode text, we simply pass in an encoding name if the text in the file doesn’t match the default encoding.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>S = <span class=\"string\">'sp\\xc4m'</span>                                          <span class=\"comment\"># Non-ASCII Unicode text</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file = open(<span class=\"string\">'unidata.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file.write(S)                                          <span class=\"comment\"># 4 characters written</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>file.close()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text = open(<span class=\"string\">'unidata.txt'</span>, encoding=<span class=\"string\">'utf-8'</span>).read()    <span class=\"comment\"># Read/decode UTF-8 text</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text</span><br><span class=\"line\"><span class=\"string\">'spÄm'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(text)                                              <span class=\"comment\"># 4 chars (code points)</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>If needed, you can also see what’s truly stored in your file by stepping into binary mode.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>raw = open(<span class=\"string\">'unidata.txt'</span>, <span class=\"string\">'rb'</span>).read()                 <span class=\"comment\"># Read raw encoded bytes</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>raw</span><br><span class=\"line\"><span class=\"string\">b'sp\\xc3\\x84m'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(raw)                                               <span class=\"comment\"># Really 5 bytes in UTF-8</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p>you can also encode and decode manually if you get Unicode data from a source other than a file.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text.encode(<span class=\"string\">'utf-8'</span>)                                   <span class=\"comment\"># Manual encode to bytes</span></span><br><span class=\"line\"><span class=\"string\">b'sp\\xc3\\x84m'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>raw.decode(<span class=\"string\">'utf-8'</span>)                                    <span class=\"comment\"># Manual decode to str</span></span><br><span class=\"line\"><span class=\"string\">'spÄm'</span></span><br></pre></td></tr></table></figure></p>\n<p>This is also useful to see how text files would automatically encode the same string differently under different encoding names, and provides a way to translate data to different encodings.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text.encode(<span class=\"string\">'latin-1'</span>)                                 <span class=\"comment\"># Bytes differ in others</span></span><br><span class=\"line\"><span class=\"string\">b'sp\\xc4m'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text.encode(<span class=\"string\">'utf-16'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xff\\xfes\\x00p\\x00\\xc4\\x00m\\x00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(text.encode(<span class=\"string\">'latin-1'</span>)), len(text.encode(<span class=\"string\">'utf-16'</span>))</span><br><span class=\"line\">(<span class=\"number\">4</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xff\\xfes\\x00p\\x00\\xc4\\x00m\\x00'</span>.decode(<span class=\"string\">'utf-16'</span>)    <span class=\"comment\"># But same string decoded</span></span><br><span class=\"line\"><span class=\"string\">'spÄm'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h2><p>Sets are <strong>unordered</strong> collections of <strong>unique and immutable</strong> objects. The choice of new {…} syntax fro set literals makes sense, since sets are much like the keys of a valueless dictionary.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X = set(<span class=\"string\">'spam'</span>)                 <span class=\"comment\"># Make a set out of a sequence in 2.X and 3.X</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Y = &#123;<span class=\"string\">'h'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'m'</span>&#125;             <span class=\"comment\"># Make a set with set literals in 3.X and 2.7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X, Y                            <span class=\"comment\"># A tuple of two sets without parentheses</span></span><br><span class=\"line\">(&#123;<span class=\"string\">'m'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'s'</span>&#125;, &#123;<span class=\"string\">'m'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'h'</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X &amp; Y                           <span class=\"comment\"># Intersection</span></span><br><span class=\"line\">&#123;<span class=\"string\">'m'</span>, <span class=\"string\">'a'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X | Y                           <span class=\"comment\"># Union</span></span><br><span class=\"line\">&#123;<span class=\"string\">'m'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'s'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X - Y                           <span class=\"comment\"># Difference</span></span><br><span class=\"line\">&#123;<span class=\"string\">'p'</span>, <span class=\"string\">'s'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>X &gt; Y                           <span class=\"comment\"># Superset</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>&#123;n ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]&#125;  <span class=\"comment\"># Set comprehensions in 3.X and 2.7</span></span><br><span class=\"line\">&#123;<span class=\"number\">16</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]))      <span class=\"comment\"># Filtering out duplicates (possibly reordered)</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>set(<span class=\"string\">'spam'</span>) - set(<span class=\"string\">'ham'</span>)        <span class=\"comment\"># Finding differences in collections</span></span><br><span class=\"line\">&#123;<span class=\"string\">'p'</span>, <span class=\"string\">'s'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>set(<span class=\"string\">'spam'</span>) == set(<span class=\"string\">'asmp'</span>)      <span class=\"comment\"># Order-neutral equality tests (== is False)</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<p>Sets also support <code>in</code> membership tests, though all other collection types in Python do too:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'p'</span> <span class=\"keyword\">in</span> set(<span class=\"string\">'spam'</span>), <span class=\"string\">'p'</span> <span class=\"keyword\">in</span> <span class=\"string\">'spam'</span>, <span class=\"string\">'ham'</span> <span class=\"keyword\">in</span> [<span class=\"string\">'eggs'</span>, <span class=\"string\">'spam'</span>, <span class=\"string\">'ham'</span>]</span><br><span class=\"line\">(<span class=\"keyword\">True</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Other-numeric-types\"><a href=\"#Other-numeric-types\" class=\"headerlink\" title=\"Other numeric types\"></a>Other numeric types</h2><p><code>decimal</code> numbers, which are fixd-precision floating numbers, and <code>fraction</code> numbers, which are rational numbers with both a numerator and a denominator. Both can be used to work around the limitations and inherent inaccuracies of floating-point match:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> decimal                  <span class=\"comment\"># Decimals: fixed precision</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = decimal.Decimal(<span class=\"string\">'3.141'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d + <span class=\"number\">1</span></span><br><span class=\"line\">Decimal(<span class=\"string\">'4.141'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>decimal.getcontext().prec = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>decimal.Decimal(<span class=\"string\">'1.00'</span>) / decimal.Decimal(<span class=\"string\">'3.00'</span>)</span><br><span class=\"line\">Decimal(<span class=\"string\">'0.33'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> fractions <span class=\"keyword\">import</span> Fraction  <span class=\"comment\"># Fractions: numerator+denominator</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = Fraction(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f + <span class=\"number\">1</span></span><br><span class=\"line\">Fraction(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f + Fraction(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">Fraction(<span class=\"number\">7</span>, <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Break-your-code’s-flexibility\"><a href=\"#Break-your-code’s-flexibility\" class=\"headerlink\" title=\"Break your code’s flexibility\"></a>Break your code’s flexibility</h3><p>The <code>type</code> object, returned by the <code>type</code> built-in function, is an object that gives the type of another object.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(type(L))                   <span class=\"comment\"># Even types are objects</span></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">type</span>'&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>By checking for specific types in your code, you effectively break its flexibility - you limit it to working on just one type. Without such tests, your code may be able to work on a whole range of types. <br></p>\n<h3 id=\"User-defined-classes\"><a href=\"#User-defined-classes\" class=\"headerlink\" title=\"User-defined classes\"></a>User-defined classes</h3><p>The implied <code>self</code> object is why we call this an object-oriented model: there is always an implied subject in functions within a class. A class is composed of <em>state informatin</em> and <em>methods</em>.</p>\n<h2 id=\"Iteration-and-optimization\"><a href=\"#Iteration-and-optimization\" class=\"headerlink\" title=\"Iteration and optimization\"></a>Iteration and optimization</h2><p>In a nutshell, an object is <em>iterable</em> if it is either a physically stored sequence in or an object that generates one item at a time in the context of an iteration - a sort of ‘virtual’ sequence. More formally, they respond to the <code>iter</code> call with an object that advances in response to <code>next</code> calls and raises an exception when finished producing values such as <em>geneartor</em>. <br><br>Python <em>file objects</em> similarly iterate line by line when used by an iteration tool: file content isn’t in a list, it’s fetched on demand. Keep in mind that every Python tool that scans an object from left to right uses the iteration protocol. <br><br>The list comprehension, though, and related functional programming tools like <code>map</code> and <code>filter</code>, will often run faster than a <code>for</code>  loop today on some types of code. <code>time</code> and <code>timeit</code> modules for timing the speed of alternatives, and the <code>profile</code> module for isolating bottlenecks. </p>\n<h2 id=\"Getting-help\"><a href=\"#Getting-help\" class=\"headerlink\" title=\"Getting help\"></a>Getting help</h2><p>The built-in <code>dir</code> lists variables assigned in the callers’ scope when called with no argument. More usefully, it returns a list of all the attributes available for anyu object passed to it.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dir(S)</span><br><span class=\"line\">[<span class=\"string\">'__add__'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__contains__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__dir__'</span>, <span class=\"string\">'__doc__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__getitem__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__getnewargs__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__iter__'</span>, <span class=\"string\">'__le__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__len__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__mod__'</span>, <span class=\"string\">'__mul__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__rmod__'</span>, <span class=\"string\">'__rmul__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__sizeof__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'capitalize'</span>, <span class=\"string\">'casefold'</span>, <span class=\"string\">'center'</span>, <span class=\"string\">'count'</span>,</span><br><span class=\"line\"><span class=\"string\">'encode'</span>, <span class=\"string\">'endswith'</span>, <span class=\"string\">'expandtabs'</span>, <span class=\"string\">'find'</span>, <span class=\"string\">'format'</span>, <span class=\"string\">'format_map'</span>, <span class=\"string\">'index'</span>,</span><br><span class=\"line\"><span class=\"string\">'isalnum'</span>, <span class=\"string\">'isalpha'</span>, <span class=\"string\">'isdecimal'</span>, <span class=\"string\">'isdigit'</span>, <span class=\"string\">'isidentifier'</span>, <span class=\"string\">'islower'</span>,</span><br><span class=\"line\"><span class=\"string\">'isnumeric'</span>, <span class=\"string\">'isprintable'</span>, <span class=\"string\">'isspace'</span>, <span class=\"string\">'istitle'</span>, <span class=\"string\">'isupper'</span>, <span class=\"string\">'join'</span>, <span class=\"string\">'ljust'</span>,</span><br><span class=\"line\"><span class=\"string\">'lower'</span>, <span class=\"string\">'lstrip'</span>, <span class=\"string\">'maketrans'</span>, <span class=\"string\">'partition'</span>, <span class=\"string\">'replace'</span>, <span class=\"string\">'rfind'</span>, <span class=\"string\">'rindex'</span>,</span><br><span class=\"line\"><span class=\"string\">'rjust'</span>, <span class=\"string\">'rpartition'</span>, <span class=\"string\">'rsplit'</span>, <span class=\"string\">'rstrip'</span>, <span class=\"string\">'split'</span>, <span class=\"string\">'splitlines'</span>, <span class=\"string\">'startswith'</span>,</span><br><span class=\"line\"><span class=\"string\">'strip'</span>, <span class=\"string\">'swapcase'</span>, <span class=\"string\">'title'</span>, <span class=\"string\">'translate'</span>, <span class=\"string\">'upper'</span>, <span class=\"string\">'zfill'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>The names with <em>dobule underscores</em> represent the implementation of the string object and are avilable to support customization. The names without the underscores in this list are the callable methods on string objects.</p>\n<p>Also we have <code>help</code> function.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>help(s.replace)</span><br><span class=\"line\">replace(...)</span><br><span class=\"line\">    S.replace(old, new[, count]) -&gt; str</span><br><span class=\"line\">    Return a copy of S <span class=\"keyword\">with</span> all occurrences of substring</span><br><span class=\"line\">    old replaced by new.  If the optional argument count <span class=\"keyword\">is</span></span><br><span class=\"line\">    given, only the first count occurrences are replaced.</span><br></pre></td></tr></table></figure></p>\n<p>Both <code>dir</code> and <code>help</code> also accept as arguments either a real object, or the name of a <em>data type</em> (like <code>str</code>, <code>list</code> and <code>dict</code>). <code>help</code> allows you to ask about a specific method via type name (e.g. help on <code>str.replace</code>).</p>\n","prev":{"title":"Javascript: Objects and variable Intro","slug":"javascript-objects-variable-intro"},"next":{"title":"Javascript: Number, String, Boolean, Null & Undefined","slug":"Number-String-Boolean-Null-Undefined"},"link":"https://whitefusion.github.io/post/introducing-python-object-types"}
{"title":"Javascript: Handling Events","date":"2018-11-16T14:03:21.000Z","excerpt":"","slug":"js-handling-events","comments":true,"tags":["note","javascript"],"categories":["language core"],"updated":"2018-11-16T15:22:51.576Z","content":"<blockquote>\n<p>This is the reading note for “Chapter 17: Handling Events, Javascript: The definitive guide 5th edition”. <br></p>\n</blockquote>\n<p>Client-side JS programs use an asynchronous event-driven programming model. In this style of programming, the web browser generates an event whenever something interesting happens to the document or browser or to some element or object associated with it. <br></p>\n<p>The <em>event type</em> is a string that specifies what kind of event occurred. The <em>event target</em> is the object on which the event occurred or with which the event is associated. When we speak of an event, we must specify both the type and the target. Window, Document, and Element objects are the most common event targets in client-side JS applications. <br></p>\n<p>All <em>event handler</em> or <em>event listener</em> is a function that handles or responds to an evnet. Applications register their event handler functions with the web browser, specifying an event type and an event target. When an event of the specified type occurs on the specified target, the browser invokes the handler. When event handlers are invoked for an object, we sometimes say that the browser has ‘fired’, ‘triggered’, or ‘dispatched’ the event. <br></p>\n<p>An <em>event object</em> is an object that is associated with a particular event and contains details about that event. Event objects are passed as an argument to the event handler function. All event objects have a <code>type</code> property that specifies the event type and a <code>target</code> property that specifies the event target. <br></p>\n<p><em>Event propagation</em> is the process by which the browser decides which objects to trigger event handlers on. For events that are specific to a single object (such as the load e vent on the Window object), no propagation is required. When certain kinds of events occur on document elements, however, they propagate or “bubble” up the document tree. An event handler can stop the propagation of an event, so that it will not continue to bubble and will not trigger handlers on containing elements. Handlers do this by invoking a method or setting a property of the event object. <br></p>\n<p>In another form of event propagation, known as <em>event capturing</em>, handlers specially registered on container elements have the opportunity to intercept events before they are delivered to their actual target. <br></p>\n<p>Some events have <em>default actions</em> associated with them. When a click event occurs on a hyperlink, for example, the default action is for the browser to follow the link and load a new page. Event handlers can prevent this default action by returning an appropriate value, invoking a method of the event object, or by setting a property of the event object. This is sometimes called “cancelling” the event. <br></p>\n<p>These event-type-specific sections cover:</p>\n<ul>\n<li>Document loading and readiness events</li>\n<li>Mouse events</li>\n<li>Mouse wheel events</li>\n<li>Drag-and-drop events</li>\n<li>Key events</li>\n<li>Text input events</li>\n</ul>\n<h2 id=\"Types-of-Events\"><a href=\"#Types-of-Events\" class=\"headerlink\" title=\"Types of Events\"></a>Types of Events</h2><h3 id=\"Legacy-Event-Types\"><a href=\"#Legacy-Event-Types\" class=\"headerlink\" title=\"Legacy Event Types\"></a>Legacy Event Types</h3><h4 id=\"Form-events\"><a href=\"#Form-events\" class=\"headerlink\" title=\"Form events\"></a>Form events</h4><p><code>&lt;form&gt;</code> elements fire submit events when the form is submitted and reset events when the form is reset. Button-like form elements (including radio buttons and checkboxes) fire click events when the user interacts with them. Form elements that maintain some kind of state generally fire change events when the user changes their state by entering text, selecting an item, or checking a box. For text input fields, a change event is not fired  until the user has finished interacting a form element and has tabbed or cliked to move focus to another element. Form elements respond to keyboard focus changes by firing focus and blur events. <br></p>\n<p>The submit and reset events have default actions that can be canceled by event handlers. The focus and blur events do not bubble, but all the other form events do. <br></p>\n<p>Note that browsers other than IE trigger an input event on <code>&lt;textarea&gt;</code> and other text-input form elements whenever the user enters text into the element. Unlike the change event, these input events are triggered for each insertion. Unfortunately, the event object of an input event does not specify what text has been input. <br></p>\n<h4 id=\"Window-events\"><a href=\"#Window-events\" class=\"headerlink\" title=\"Window events\"></a>Window events</h4>","next":{"title":"HTML notes","slug":"html-note"},"link":"https://whitefusion.github.io/post/js-handling-events"}
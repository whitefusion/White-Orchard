{"title":"Javascript: Class(2)","date":"2018-08-31T15:15:49.000Z","excerpt":"","slug":"js-class-2","comments":true,"tags":["javascript","note"],"categories":["language core"],"updated":"2018-09-01T07:12:22.377Z","content":"<blockquote>\n<p>This is the reading note for “Chapter 9 (9.6 ~ end): Classes and Modules, values and variables, Javascript: The definitive guide 5th edition”. <br></p>\n</blockquote>\n<h3 id=\"SubClasses\"><a href=\"#SubClasses\" class=\"headerlink\" title=\"SubClasses\"></a>SubClasses</h3><p>In OOP, a class B can extend or subclass another class A. We say that A is the superclass and B is the subclass. If a method of B overrides a method of A, the overriding method in B may sometimes want to invoke the overridden method in A: this is called <em>method chaining</em>. An abstract class is one that defines one or more methods without an implementation. The implementation of these abstract methods is left to the <em>concrete subclasses</em> of the abstract class. If class B extends A, the <strong>B.prototype</strong> must be an heir of <strong>A.prototype</strong>. There is also an alternative to subclassing known as <em>composition</em>.</p>\n<h4 id=\"Defining-a-Subclass\"><a href=\"#Defining-a-Subclass\" class=\"headerlink\" title=\"Defining a Subclass\"></a>Defining a Subclass</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineSubclass</span>(<span class=\"params\">superclass, constructor, methods, statics</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Set up the prototype object of the subclass</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>.prototype = inherit(superclass.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>.prototype.<span class=\"keyword\">constructor</span> = <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(methods) extend(<span class=\"keyword\">constructor</span>.prototype, methods);</span><br><span class=\"line\">    if(statics) extend(<span class=\"keyword\">constructor</span>, statics);</span><br><span class=\"line\"></span><br><span class=\"line\">    return <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.extend = function (<span class=\"keyword\">constructor</span>, methods, statics) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> defineSubclass(<span class=\"keyword\">this</span>, <span class=\"keyword\">constructor</span>, methods, statics);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// example: SingletonSet</span><br><span class=\"line\">function SingletonSet(member) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.member = member;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a prototype object that inherits from the prototype of Set</span></span><br><span class=\"line\">SingleonSet.prototype = inherit(<span class=\"built_in\">Set</span>.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Now add properties to the prototype</span></span><br><span class=\"line\"><span class=\"comment\">// These properties override the property of the same name from </span></span><br><span class=\"line\"><span class=\"comment\">// Set.prototype</span></span><br><span class=\"line\">extend(Singleton.prototype, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: SingletonSet,</span><br><span class=\"line\">    add: function() &#123; <span class=\"keyword\">throw</span> <span class=\"string\">'read-only set'</span>; &#125;,</span><br><span class=\"line\">    remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">throw</span> <span class=\"string\">'read-only set'</span>; &#125;,</span><br><span class=\"line\">    size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, context</span>) </span>&#123;f.call(context, <span class=\"keyword\">this</span>.member);&#125;,</span><br><span class=\"line\">    contains: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x === <span class=\"keyword\">this</span>.member; &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">SingletonSet.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> that <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Set</span> &amp;&amp; that.size()==<span class=\"number\">1</span> &amp;&amp; that.contains(<span class=\"keyword\">this</span>.member);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Constructor-and-Method-Chaining\"><a href=\"#Constructor-and-Method-Chaining\" class=\"headerlink\" title=\"Constructor and Method Chaining\"></a>Constructor and Method Chaining</h4><p>When we define a subclass, we only want to augment or modify the behavior of our superclass methods, not replace them completely. To do this, the constructor and methods of the subclass call or chain to the superclass constructor and the superclass methods.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NonNullSet</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Just chain to our superclass</span></span><br><span class=\"line\">    <span class=\"comment\">// Invoke the superclass constructor as an ordinary function to initialize</span></span><br><span class=\"line\">    <span class=\"comment\">// the object that has been created by this constructor invocation</span></span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make NonNullSet a subclass of Set</span></span><br><span class=\"line\">NonNullSet.prototype = inherit(<span class=\"built_in\">Set</span>.prototype);</span><br><span class=\"line\">NonNullSet.prototype.constructor = NonNullSet;</span><br><span class=\"line\"></span><br><span class=\"line\">NonNullSet.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">arguments</span>[i] == <span class=\"literal\">null</span> )</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( <span class=\"string\">\"Can't add null or undefined to a NonNullSet\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Chain to the superclass to perform the actual insertion</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Set</span>.prototype.add.apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A even more generalized “filtered set” :<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Define a set class that holds strings only</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> StringSet = filteredSetSubclass(<span class=\"built_in\">Set</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">'string'</span>; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define a set class that does not allow null, undefined or functions</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MySet = filteredSetSubclass( NonNullSet, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x !== <span class=\"string\">\"function\"</span>; &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>This is a factory function that produce classes.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This function returns a subclass of specified set class and overrides</span></span><br><span class=\"line\"><span class=\"comment\"> * the add() method of that class to apply the specified filter</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filteredSetSubclass</span>(<span class=\"params\">superclass, filter</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">constructor</span> = function() &#123;</span><br><span class=\"line\">        superclass.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proto = <span class=\"keyword\">constructor</span>.prototype = inherit(superclass.prototype);</span><br><span class=\"line\">    proto.<span class=\"keyword\">constructor</span> = <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">    proto.add = function() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// apply the filter to all arguments before adding any </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> v = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!filter(v)) <span class=\"keyword\">throw</span> (<span class=\"string\">'value '</span> + v + <span class=\"string\">' rejected by fitler'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        superclass.prototype.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Composition-Versus-Subclassing\"><a href=\"#Composition-Versus-Subclassing\" class=\"headerlink\" title=\"Composition Versus Subclassing\"></a>Composition Versus Subclassing</h4><p>A well-known principle in object-oriented design is “favor composition over inheritance”.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * A filteredSet wraps a specified set object and applies a specified filter </span></span><br><span class=\"line\"><span class=\"comment\"> * to values passed to its add() method. All of the other core set methods </span></span><br><span class=\"line\"><span class=\"comment\"> * simply forward to the wrapped set instance.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> FilteredSet = <span class=\"built_in\">Set</span>.extend( </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FilteredSet</span>(<span class=\"params\">set, filter</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.set = set;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.filter = filter;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.filter) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++ ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> v = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ( !<span class=\"keyword\">this</span>.filter(v) ) </span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\" FilteredSet: value \"</span> + v + <span class=\"string\">\" rejected by filter \"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.set.add.apply(<span class=\"keyword\">this</span>.set, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.set.remove.apply(<span class=\"keyword\">this</span>.set, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        contains: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.set.contains(v);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.set.size(); &#125;,</span><br><span class=\"line\">        foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, c</span>) </span>&#123; <span class=\"keyword\">this</span>.set.foreach(f, c); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure></p>\n<p>One of the benefits of using composition in this case is taht only a single FilteredSet subclass is required.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> FilteredSet( <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x !== <span class=\"literal\">null</span>; &#125; );</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Class-Hierarchies-and-Abstract-classes\"><a href=\"#Class-Hierarchies-and-Abstract-classes\" class=\"headerlink\" title=\"Class Hierarchies and Abstract classes\"></a>Class Hierarchies and Abstract classes</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A convenient function that can be used for any abstract method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abstractmethod</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"abstract method\"</span>); &#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * The AbstractSet class defines a single abstract method, contains().</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AbstractSet</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Can't instantiate abstract classes\"</span>);&#125;</span><br><span class=\"line\">AbstractSet.prototype.contains = abstractmethod;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * NotSet is a concrete subclass of AbstractSet.</span></span><br><span class=\"line\"><span class=\"comment\"> * The members of this set are all values that are not members of some</span></span><br><span class=\"line\"><span class=\"comment\"> * other set. Because it is defined in terms of another set it is not</span></span><br><span class=\"line\"><span class=\"comment\"> * writable, and because it has infinite members, it is not enumerable.</span></span><br><span class=\"line\"><span class=\"comment\"> * All we can do with it is test for membership.</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that we're using the Function.prototype.extend() method we defined</span></span><br><span class=\"line\"><span class=\"comment\"> * earlier to define this subclass.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> NotSet = AbstractSet.extend(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NotSet</span>(<span class=\"params\">set</span>) </span>&#123; <span class=\"keyword\">this</span>.set = set; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        contains: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.set.contains(x); &#125;,</span><br><span class=\"line\">        toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"~\"</span> + <span class=\"keyword\">this</span>.set.toString(); &#125;,</span><br><span class=\"line\">        equals: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> that <span class=\"keyword\">instanceof</span> NotSet &amp;&amp; <span class=\"keyword\">this</span>.set.equals(that.set);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * AbstractEnumerableSet is an abstract subclass of AbstractSet.</span></span><br><span class=\"line\"><span class=\"comment\"> * It defines the abstract methods size() and foreach(), and then implements</span></span><br><span class=\"line\"><span class=\"comment\"> * concrete isEmpty(), toArray(), to[Locale]String(), and equals() methods</span></span><br><span class=\"line\"><span class=\"comment\"> * on top of those. Subclasses that implement contains(), size(), and foreach()</span></span><br><span class=\"line\"><span class=\"comment\"> * get these five concrete methods for free.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AbstractEnumerableSet = AbstractSet.extend(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Can't instantiate abstract classes\"</span>); &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        size: abstractmethod,</span><br><span class=\"line\">        foreach: abstractmethod,</span><br><span class=\"line\">        isEmpty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size() == <span class=\"number\">0</span>; &#125;,</span><br><span class=\"line\">        toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"string\">\"&#123;\"</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">                             <span class=\"keyword\">if</span> (i++ &gt; <span class=\"number\">0</span>) s += <span class=\"string\">\", \"</span>;</span><br><span class=\"line\">                             s += v;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        toLocaleString : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"string\">\"&#123;\"</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">                             <span class=\"keyword\">if</span> (i++ &gt; <span class=\"number\">0</span>) s += <span class=\"string\">\", \"</span>;</span><br><span class=\"line\">                             <span class=\"keyword\">if</span> (v == <span class=\"literal\">null</span>) s += v; <span class=\"comment\">// null &amp; undefined</span></span><br><span class=\"line\">                             <span class=\"keyword\">else</span> s += v.toLocaleString(); <span class=\"comment\">// all others</span></span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s + <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        toArray: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; a.push(v); &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        equals: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(that <span class=\"keyword\">instanceof</span> AbstractEnumerableSet)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// If they don't have the same size, they're not equal</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size() != that.size()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// Now check whether every element in this is also in that.</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;<span class=\"keyword\">if</span> (!that.contains(v)) <span class=\"keyword\">throw</span> <span class=\"literal\">false</span>;&#125;);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">// All elements matched: sets are equal.</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (x) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x === <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// Sets are not equal</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> x; <span class=\"comment\">// Some other exception occurred: rethrow it.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * SingletonSet is a concrete subclass of AbstractEnumerableSet.</span></span><br><span class=\"line\"><span class=\"comment\"> * A singleton set is a read-only set with a single member.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SingletonSet = AbstractEnumerableSet.extend(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SingletonSet</span>(<span class=\"params\">member</span>) </span>&#123; <span class=\"keyword\">this</span>.member = member; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        contains: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;  <span class=\"keyword\">return</span> x === <span class=\"keyword\">this</span>.member; &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;,</span><br><span class=\"line\">        foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f,ctx</span>) </span>&#123; f.call(ctx, <span class=\"keyword\">this</span>.member); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * AbstractWritableSet is an abstract subclass of AbstractEnumerableSet.</span></span><br><span class=\"line\"><span class=\"comment\"> * It defines the abstract methods add() and remove(), and then implements</span></span><br><span class=\"line\"><span class=\"comment\"> * concrete union(), intersection(), and difference() methods on top of them.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AbstractWritableSet = AbstractEnumerableSet.extend(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Can't instantiate abstract classes\"</span>); &#125;, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add: abstractmethod,</span><br><span class=\"line\">        remove: abstractmethod,</span><br><span class=\"line\">        union: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            that.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; self.add(v); &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        intersection: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; <span class=\"keyword\">if</span> (!that.contains(v)) self.remove(v);&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        difference: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            that.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; self.remove(v); &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * An ArraySet is a concrete subclass of AbstractWritableSet.</span></span><br><span class=\"line\"><span class=\"comment\"> * It represents the set elements as an array of values, and uses a linear</span></span><br><span class=\"line\"><span class=\"comment\"> * search of the array for its contains() method. Because the contains()</span></span><br><span class=\"line\"><span class=\"comment\"> * method is O(n) rather than O(1), it should only be used for relatively</span></span><br><span class=\"line\"><span class=\"comment\"> * small sets. Note that this implementation relies on the ES5 Array methods</span></span><br><span class=\"line\"><span class=\"comment\"> * indexOf() and forEach().</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ArraySet = AbstractWritableSet.extend(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArraySet</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        contains: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.values.indexOf(v) != <span class=\"number\">-1</span>; &#125;,</span><br><span class=\"line\">        size: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.values.length; &#125;,</span><br><span class=\"line\">        foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f,c</span>) </span>&#123; <span class=\"keyword\">this</span>.values.forEach(f, c); &#125;,</span><br><span class=\"line\">        add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> arg = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.contains(arg)) <span class=\"keyword\">this</span>.values.push(arg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> p = <span class=\"keyword\">this</span>.values.indexOf(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.values.splice(p, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Classes-in-ECMAScript5\"><a href=\"#Classes-in-ECMAScript5\" class=\"headerlink\" title=\"Classes in ECMAScript5\"></a>Classes in ECMAScript5</h3><p>ECMAScript5 adds methods for specifying property attributes (getters, setters, enumerability, writability and configurability) and for restricting the extensibility of objects. </p>\n<h4 id=\"Making-properties-nonenumerable\"><a href=\"#Making-properties-nonenumerable\" class=\"headerlink\" title=\"Making properties nonenumerable\"></a>Making properties nonenumerable</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Defining nonenumerable properties */</span></span><br><span class=\"line\"><span class=\"comment\">// Wrap our code in a function so we can define variables in the function scope</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Define objectId as a nonenumerable property inherited by all objects.</span></span><br><span class=\"line\">     <span class=\"comment\">// When this property is read, the getter function is invoked.</span></span><br><span class=\"line\">     <span class=\"comment\">// It has no setter, so it is read-only.</span></span><br><span class=\"line\">     <span class=\"comment\">// It is nonconfigurable, so it can't be deleted.</span></span><br><span class=\"line\">     <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>.prototype, <span class=\"string\">\"objectId\"</span>, &#123;</span><br><span class=\"line\">                               get: idGetter,       <span class=\"comment\">// Method to get value</span></span><br><span class=\"line\">                               enumerable: <span class=\"literal\">false</span>,   <span class=\"comment\">// Nonenumerable</span></span><br><span class=\"line\">                               configurable: <span class=\"literal\">false</span>  <span class=\"comment\">// Can't delete it</span></span><br><span class=\"line\">                           &#125;);</span><br><span class=\"line\">     <span class=\"comment\">// This is the getter function called when objectId is read</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">idGetter</span>(<span class=\"params\"></span>) </span>&#123;             <span class=\"comment\">// A getter function to return the id</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!(idprop <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)) &#123;      <span class=\"comment\">// If object doesn't already have an id</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.isExtensible(<span class=\"keyword\">this</span>)) <span class=\"comment\">// And if we can add a property</span></span><br><span class=\"line\">                 <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Can't define id for nonextensible objects\"</span>);</span><br><span class=\"line\">             <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, idprop, &#123;         <span class=\"comment\">// Give it one now.</span></span><br><span class=\"line\">                                       value: nextid++,    <span class=\"comment\">// This is the value</span></span><br><span class=\"line\">                                       writable: <span class=\"literal\">false</span>,    <span class=\"comment\">// Read-only</span></span><br><span class=\"line\">                                       enumerable: <span class=\"literal\">false</span>,  <span class=\"comment\">// Nonenumerable</span></span><br><span class=\"line\">                                       configurable: <span class=\"literal\">false</span> <span class=\"comment\">// Nondeletable</span></span><br><span class=\"line\">                                   &#125;);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[idprop];          <span class=\"comment\">// Now return the existing or new value</span></span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     <span class=\"comment\">// These variables are used by idGetter() and are private to this function</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> idprop = <span class=\"string\">\"|**objectId**|\"</span>;    <span class=\"comment\">// Assume this property isn't in use</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> nextid = <span class=\"number\">1</span>;                   <span class=\"comment\">// Start assigning ids at this #</span></span><br><span class=\"line\">&#125;()); <span class=\"comment\">// Invoke the wrapper function to run the code right away</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Defining-Immutable-classes\"><a href=\"#Defining-Immutable-classes\" class=\"headerlink\" title=\"Defining Immutable classes\"></a>Defining Immutable classes</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This function works with or without 'new': a constructor and factory function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Range</span>(<span class=\"params\">from,to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// These are descriptors for the read-only from and to properties.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> props = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: &#123;<span class=\"attr\">value</span>:<span class=\"keyword\">from</span>, <span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>, <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        to: &#123;<span class=\"attr\">value</span>:to, <span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>, <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Range)                <span class=\"comment\">// If invoked as a constructor</span></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperties(<span class=\"keyword\">this</span>, props); <span class=\"comment\">// Define the properties</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>                                      <span class=\"comment\">// Otherwise, as a factory</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(Range.prototype, <span class=\"comment\">// Create and return a new</span></span><br><span class=\"line\">                             props);          <span class=\"comment\">// Range object with props</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// If we add properties to the Range.prototype object in the same way,</span></span><br><span class=\"line\"><span class=\"comment\">// then we can set attributes on those properties.  Since we don't specify</span></span><br><span class=\"line\"><span class=\"comment\">// enumerable, writable, or configurable, they all default to false.</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(Range.prototype, &#123;</span><br><span class=\"line\">    includes: &#123;</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    foreach: &#123;</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from); x &lt;= <span class=\"keyword\">this</span>.to; x++) f(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: &#123;</span><br><span class=\"line\">        value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*Property descriptor utilities*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">freezeProps</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> props = (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>)              <span class=\"comment\">// If 1 arg</span></span><br><span class=\"line\">        ? <span class=\"built_in\">Object</span>.getOwnPropertyNames(o)              <span class=\"comment\">//  use all props</span></span><br><span class=\"line\">        : <span class=\"built_in\">Array</span>.prototype.splice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>); <span class=\"comment\">//  else named props</span></span><br><span class=\"line\">    props.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">// Make each one read-only and permanent</span></span><br><span class=\"line\">        <span class=\"comment\">// Ignore nonconfigurable properties</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(o,n).configurable) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(o, n, &#123; <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;  <span class=\"comment\">// So we can keep using it</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make the named (or all) properties of o nonenumerable, if configurable.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideProps</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> props = (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span>)              <span class=\"comment\">// If 1 arg</span></span><br><span class=\"line\">        ? <span class=\"built_in\">Object</span>.getOwnPropertyNames(o)              <span class=\"comment\">//  use all props</span></span><br><span class=\"line\">        : <span class=\"built_in\">Array</span>.prototype.splice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>); <span class=\"comment\">//  else named props</span></span><br><span class=\"line\">    props.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">// Hide each one from the for/in loop</span></span><br><span class=\"line\">        <span class=\"comment\">// Ignore nonconfigurable properties</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(o,n).configurable) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(o, n, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A simpler immutable class */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Range</span>(<span class=\"params\">from, to</span>) </span>&#123;    <span class=\"comment\">// Constructor for an immutable Range class</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.from = <span class=\"keyword\">from</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">    freezeProps(<span class=\"keyword\">this</span>);        <span class=\"comment\">// Make the properties immutable</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Range.prototype = hideProps(&#123; <span class=\"comment\">// Define prototype with nonenumerable properties</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Range,</span><br><span class=\"line\">    includes: function(x) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x=<span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from);x&lt;=<span class=\"keyword\">this</span>.to;x++) f(x);&#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Encapsulating-Object-State\"><a href=\"#Encapsulating-Object-State\" class=\"headerlink\" title=\"Encapsulating Object State\"></a>Encapsulating Object State</h4><p>ECMAScript 5 allows us to encapsulate our state variables more robustly by defining property getter and setter that cannot be deleted.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Example 9-21. A Range class with strongly encapsulated endpoints */</span></span><br><span class=\"line\"><span class=\"comment\">// This version of the Range class is mutable but encapsulates its endpoint</span></span><br><span class=\"line\"><span class=\"comment\">// variables to maintain the invariant that from &lt;= to.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Range</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Verify that the invariant holds when we're created</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> &gt; to) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Range: from must be &lt;= to\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Define the accessor methods that maintain the invariant</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFrom</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"keyword\">return</span> <span class=\"keyword\">from</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTo</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"keyword\">return</span> to; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFrom</span>(<span class=\"params\">f</span>) </span>&#123;  <span class=\"comment\">// Don't allow from to be set &gt; to</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f &lt;= to) <span class=\"keyword\">from</span> = f;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Range: from must be &lt;= to\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTo</span>(<span class=\"params\">t</span>) </span>&#123;    <span class=\"comment\">// Don't allow to to be set &lt; from</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt;= <span class=\"keyword\">from</span>) to = t;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Range: to must be &gt;= from\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Create enumerable, nonconfigurable properties that use the accessors</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperties(<span class=\"keyword\">this</span>, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: &#123;<span class=\"attr\">get</span>: getFrom, <span class=\"attr\">set</span>: setFrom, <span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">        to: &#123; <span class=\"attr\">get</span>: getTo, <span class=\"attr\">set</span>: setTo, <span class=\"attr\">enumerable</span>:<span class=\"literal\">true</span>, <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The prototype object is unchanged from previous examples.</span></span><br><span class=\"line\"><span class=\"comment\">// The instance methods read from and to as if they were ordinary properties.</span></span><br><span class=\"line\">Range.prototype = hideProps(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Range,</span><br><span class=\"line\">    includes: function(x) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x=<span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from);x&lt;=<span class=\"keyword\">this</span>.to;x++) f(x);&#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Preventing-Class-Extensions\"><a href=\"#Preventing-Class-Extensions\" class=\"headerlink\" title=\"Preventing Class Extensions\"></a>Preventing Class Extensions</h4><p><code>Object.seal()</code> prevents the addition of new properties and also make all current properties nonconfigurable, so that they cannot be deleted.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.seal(<span class=\"built_in\">Object</span>.prototype);</span><br></pre></td></tr></table></figure></p>\n<p>Another dynamic feature fo JS is the ability to replace ( or ‘monkey-patch’ ) methods of an object:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original_sort_method = <span class=\"built_in\">Array</span>.prototype.sort;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    original_sort_method.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Array sort took \"</span> + (end - start) + <span class=\"string\">\" milliseconds.\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Another way is with <code>Object.freeze()</code>, which does everything that <code>Object.seal()</code> does, but also makes all properties read-only and nonconfigurable. </p>\n<h4 id=\"Function-Scope-As-a-Private-Namespace\"><a href=\"#Function-Scope-As-a-Private-Namespace\" class=\"headerlink\" title=\"Function Scope As a Private Namespace\"></a>Function Scope As a Private Namespace</h4><p>We don’t want users of the class to ever call some functions, so it would be better if it was inaccessible. We can do that by defining our module inside a function.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Set</span> = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invocation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// This constructor function is a local variable.</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values = &#123;&#125;;     <span class=\"comment\">// The properties of this object hold the set</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.n = <span class=\"number\">0</span>;           <span class=\"comment\">// How many values are in the set</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);  <span class=\"comment\">// All arguments are values to add</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Now define instance methods on Set.prototype.</span></span><br><span class=\"line\">    <span class=\"comment\">// For brevity, code has been omitted here</span></span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.prototype.contains = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Note that we call v2s(), not the heavily prefixed Set._v2s()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.values.hasOwnProperty(v2s(value));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.prototype.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.n; &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Set</span>.prototype.foreach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, context</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// These are helper functions and variables used by the methods above</span></span><br><span class=\"line\">    <span class=\"comment\">// They're not part of the public API of the module, but they're hidden</span></span><br><span class=\"line\">    <span class=\"comment\">// within this function scope so we don't have to define them as a</span></span><br><span class=\"line\">    <span class=\"comment\">// property of Set or prefix them with underscores.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">v2s</span>(<span class=\"params\">val</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectId</span>(<span class=\"params\">o</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextId = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// The public API for this module is the Set() constructor function.</span></span><br><span class=\"line\">    <span class=\"comment\">// We need to export that function from this private namespace so that</span></span><br><span class=\"line\">    <span class=\"comment\">// it can be used on the outside.  In this case, we export the constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// by returning it.  It becomes the value of the assignment expression</span></span><br><span class=\"line\">    <span class=\"comment\">// on the first line above.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Set</span>;</span><br><span class=\"line\">&#125;()); <span class=\"comment\">// Invoke the function immediately after defining it.</span></span><br></pre></td></tr></table></figure></p>\n<p>For set moudles, we might write code that looks something like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a single global variable to hold all collection-related modules</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> collections;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!collections) collections = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Now define the sets module</span></span><br><span class=\"line\">collections.sets = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">namespace</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Define the various set classes here, using local variables and functions</span></span><br><span class=\"line\">    <span class=\"comment\">//    ... Lots of code omitted...</span></span><br><span class=\"line\">    <span class=\"comment\">// Now export our API by returning a namespace object</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Exported property name : local variable name</span></span><br><span class=\"line\">        AbstractSet: AbstractSet,</span><br><span class=\"line\">        NotSet: NotSet,</span><br><span class=\"line\">        AbstractEnumerableSet: AbstractEnumerableSet,</span><br><span class=\"line\">        SingletonSet: SingletonSet,</span><br><span class=\"line\">        AbstractWritableSet: AbstractWritableSet,</span><br><span class=\"line\">        ArraySet: ArraySet</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// an alternative</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> collections;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!collections) collections = &#123;&#125;;</span><br><span class=\"line\">collections.sets = &#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">namespace</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//    ... Lots of code omitted...</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// Now export our public API to the namespace object created above</span></span><br><span class=\"line\">    collections.sets.AbstractSet = AbstractSet;</span><br><span class=\"line\">    collections.sets.NotSet = NotSet;     <span class=\"comment\">// And so on...</span></span><br><span class=\"line\">    <span class=\"comment\">// No return statement is needed since exports were done above.</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"Javascript in Web Browsers","slug":"js-web-browser"},"next":{"title":"Web Worker","slug":"web-worker"},"link":"https://whitefusion.github.io/post/js-class-2"}
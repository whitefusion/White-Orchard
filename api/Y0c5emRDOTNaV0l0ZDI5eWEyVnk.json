{"title":"Web Worker","date":"2018-08-26T11:13:27.000Z","excerpt":"","slug":"web-worker","comments":true,"tags":["note","javascript"],"updated":"2019-03-02T03:20:12.544Z","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><ul>\n<li>Javascript is <strong>single-threaded</strong>: a browser will never run two event handlers at the same time.</li>\n<li>No need to worry about locks, dead-locks or race conditions. </li>\n<li>Client-side JS functions must not run too long, or it will tie up the event loop and the web browser will be unresponsive to the user input.</li>\n</ul>\n<h1 id=\"Web-workers\"><a href=\"#Web-workers\" class=\"headerlink\" title=\"Web workers\"></a>Web workers</h1><p><img src=\"http://webworkers.tompascall.com/img/worker-events.png\" alt=\"\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Web worker is a workaround for multi-thread programming. <br><br>It defines a ‘worker’ as <em>parallel threads</em> of execution. <br><br>Web workers live in a <strong>self-contained</strong> execution enviroment. <br><br>It is possible to write long-running functions that do not stall the event loop. <br><br>It can only communicate with main thread via <strong>async message</strong> passing. <br><br>No access to Documnet or Window object <br><br>If you send message to a closed worker, the message will be discarded silently without raising an error.</p>\n<h2 id=\"Compositions\"><a href=\"#Compositions\" class=\"headerlink\" title=\"Compositions\"></a>Compositions</h2><p>There are two pieces to the Web Worker specification. <br><br><strong>Worker object</strong>: this is a worker looks like from the outside, the the thread that creates it. <br><br><strong>WorkerGlobalScope</strong>: this is the <em>global</em> object for a new worker, it is what a woker thread looks like inside.</p>\n<h3 id=\"Worker-Object\"><a href=\"#Worker-Object\" class=\"headerlink\" title=\"Worker Object\"></a>Worker Object</h3><ul>\n<li><p><code>Worker()</code> :  constructor. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"utils/loader.js\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>postMessage()</code>: send data into worker, not restricted to string message</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader.postMessage(<span class=\"string\">'file.txt'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>onmessage()</code>: listen on message events from worker thread</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> message = e.data;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'url content:'</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>terminate()</code>: force a worker thread to stop running</p>\n</li>\n</ul>\n<h3 id=\"Worker-Scope\"><a href=\"#Worker-Scope\" class=\"headerlink\" title=\"Worker Scope\"></a>Worker Scope</h3><ul>\n<li><code>postMessage()</code>: send message outside the worker</li>\n<li><code>onmessage()</code>: listen on message from the outside</li>\n<li><code>close()</code>: allow a worker to terminate itself</li>\n<li><p><code>importScripts()</code>: load required scripts, usually used at the head of worker</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importScripts(<span class=\"string\">'collections/Set.js'</span>, <span class=\"string\">'collections/Map.js'</span>,);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>It is <em>synchronous</em>, it does not return until all scripts loaded and executed.</li>\n<li>It may cause <strong>dependency cycles</strong>.</li>\n</ul>\n</li>\n</ul>\n<p>Other properties in <code>WorkerGlobalScope</code> :</p>\n<ul>\n<li>properties of the core JS global object, such as <code>JSON</code>, <code>isNaN()</code> and <code>Date()</code>.</li>\n<li>timer methods like <code>setTimeout()</code>, <code>setInterval()</code> …</li>\n<li><code>location</code>: describes the URL that was passed to <code>Worker()</code>: <code>herf</code>, <code>protocol</code>, <code>host</code>, <code>port</code>, <code>search</code>, <code>hash</code> … </li>\n<li><code>navigator</code> : <code>appVersion</code>, <code>platform</code>, <code>appName</code> …</li>\n<li>important client side constructor objects like <code>XMLHttpRequest()</code>  … </li>\n<li><del>console</del> : might need to make use of message type when debugging</li>\n</ul>\n","prev":{"title":"Javascript: Class(2)","slug":"js-class-2"},"next":{"title":"Javascript: Class (1)","slug":"js-class-1"},"link":"https://whitefusion.github.io/post/web-worker"}
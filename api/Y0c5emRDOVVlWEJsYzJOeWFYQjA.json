{"title":"Angular: Typescript","date":"2018-06-04T12:10:03.000Z","excerpt":"","slug":"Typescript","comments":true,"tags":["language","core","note","typescript"],"updated":"2018-06-15T15:00:54.667Z","content":"<blockquote>\n<p>This is the reading note for “Typescript, ng-book, the complete book on Angular 5 “. <br></p>\n</blockquote>\n<h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h3><p>There are five big improvements that Typescript bring over ES5: </p>\n<ul>\n<li>types</li>\n<li>classes</li>\n<li>decorators</li>\n<li>imports</li>\n<li>language utilities (e.g. destructuring)</li>\n</ul>\n<h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><p>TS can optionally provide the variable type along with its name as we declare it. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fullname: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greetText</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello'</span> + name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The declaration of variable type as well as the return type of a function could prevent bugs caused by type error.</p>\n<h3 id=\"Built-in-types\"><a href=\"#Built-in-types\" class=\"headerlink\" title=\"Built-in types\"></a>Built-in types</h3><ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>array<type></type></li>\n<li>enums : A bi-direction dictionary, which could be used for authorization management. </li>\n<li>any</li>\n<li>void</li>\n</ul>\n<h3 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h3><p>A class could contain properties and methods like<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Persion &#123;</span><br><span class=\"line\">    first_name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    last_name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    greet() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The type of property is optinal. <br><br>When methods don’t declare an explicit returning type and return a value, it’s assumed they can return anything. <br><br>However, in the case above, we are returning <em>void</em>, since there’s no explicit return statement, which is also a valid <em>any</em> value.<br></p>\n<h3 id=\"Constructors\"><a href=\"#Constructors\" class=\"headerlink\" title=\"Constructors\"></a>Constructors</h3><p>A constructor is a special method that is executed when a <em>new</em> instance of the class is being created. <br><br>Constructor methods <strong>must</strong> be named constructor, They can optionally take parameters but they cannot return any values. <br><br>A class can only have one constructor. <br><br>Constructor can take parameters when we want to parameterize our new instance creation.<br><br>When a class has no constructor defined explicityly, one will be created automatically.</p>\n<h3 id=\"Inheritance\"><a href=\"#Inheritance\" class=\"headerlink\" title=\"Inheritance\"></a>Inheritance</h3><p>Inheritance is a way to indicate that a class receives behavior from a parent class. Then we can override, modify or augment those behaviors on the new class. <br><br>It is achieved through the <strong>extends</strong> keyword.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Report&#123;</span><br><span class=\"line\">    data: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">data: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">line</span>)</span>&#123;<span class=\"built_in\">console</span>.log(line)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> TabbedReport <span class=\"keyword\">extends</span> Report &#123;</span><br><span class=\"line\">    headers: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">headers: <span class=\"built_in\">string</span>[], values: <span class=\"built_in\">string</span>[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(values)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.headers = headers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    run() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.headers);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Other-features\"><a href=\"#Other-features\" class=\"headerlink\" title=\"Other features\"></a>Other features</h3><ul>\n<li>Interfaces</li>\n<li>Generics</li>\n<li>Importing and exporting modules</li>\n<li>Decorators</li>\n<li>Destructuring</li>\n</ul>\n","prev":{"title":"Javascript: Lexical Structure","slug":"Lexical-Structure"},"next":{"title":"01 Package problem","slug":"Package-problem"},"link":"https://whitefusion.github.io/post/Typescript"}
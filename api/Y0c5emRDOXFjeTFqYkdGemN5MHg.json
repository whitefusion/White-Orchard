{"title":"Javascript: Class (1)","date":"2018-08-17T15:17:16.000Z","excerpt":"","slug":"js-class-1","comments":true,"tags":["note","javascript"],"categories":["language core"],"updated":"2018-08-31T15:42:24.220Z","content":"<blockquote>\n<p>This is the reading note for “Chapter 9 (9.6): Classes and Modules, values and variables, Javascript: The definitive guide 5th edition”. <br></p>\n</blockquote>\n<p>It is often useful to define a <em>class</em> of objects that share certain properties. Members, or instances, of the class have their own properties to hold or define their state, but they also have properties that define their behavior. This behavior is defined by the class and is shared by all instances. Classes are based on JS’s prototype-based inheritance mechanism. If two objects inherit from the same prototype, this typically means that they were created and initialized by the same constructor function. <br></p>\n<h3 id=\"Classes-and-Prototypes\"><a href=\"#Classes-and-Prototypes\" class=\"headerlink\" title=\"Classes and Prototypes\"></a>Classes and Prototypes</h3><p>If we define a prototype object, and then use <code>inherit()</code> to create objects that inherit from it, we have defined a JS class. Usually, the instances of a class require further initialization, and it is common to define a function that creates and initialize the new object.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A class representing a range of values</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The prototype object is stored as a property of this function.</span></span><br><span class=\"line\">    <span class=\"comment\">// and defines the shared methods for all range objects. </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = inherit(range.methods);</span><br><span class=\"line\"></span><br><span class=\"line\">    r.from = <span class=\"keyword\">from</span>;</span><br><span class=\"line\">    r.to = to;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">range.methods = &#123;</span><br><span class=\"line\">    includes: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from); x &lt;= <span class=\"keyword\">this</span>.to; x++) f(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = range(<span class=\"number\">1</span>,<span class=\"number\">3</span>); </span><br><span class=\"line\">r.includes(<span class=\"number\">2</span>);</span><br><span class=\"line\">r.foreach(<span class=\"built_in\">console</span>.log); <span class=\"comment\">// Prints 1,2,3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r); <span class=\"comment\">// prints (1...3)</span></span><br></pre></td></tr></table></figure></p>\n<p>Notice that we use a property of this <code>range()</code> function <code>range.methods</code> as a convenient place to store the prototype object that defines the class.</p>\n<h3 id=\"Classes-and-Constructors\"><a href=\"#Classes-and-Constructors\" class=\"headerlink\" title=\"Classes and Constructors\"></a>Classes and Constructors</h3><p>Constructor invocation using <code>new</code> automatically create the new object, so the constructor itself only needs to initialize the state of that new object. The critical features of constructor invocations is that they <code>prototype</code> property of the constructor is used as the prototype of the new object.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// range class with a constructor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Range</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.from = <span class=\"keyword\">from</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Range.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return true if x is in the range, false otherwise</span></span><br><span class=\"line\">    <span class=\"comment\">// This method works for textual and Date ranges as well as numeric.</span></span><br><span class=\"line\">    includes: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Invoke f once for each integer in the range.</span></span><br><span class=\"line\">    <span class=\"comment\">// This method works only for numeric ranges.</span></span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from); x &lt;= <span class=\"keyword\">this</span>.to; x++) f(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Return a string representation of the range</span></span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> Range(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">r.includes(<span class=\"number\">2</span>);            <span class=\"comment\">// =&gt; true: 2 is in the range</span></span><br><span class=\"line\">r.foreach(<span class=\"built_in\">console</span>.log);   <span class=\"comment\">// Prints 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);           <span class=\"comment\">// Prints (1...3)</span></span><br></pre></td></tr></table></figure></p>\n<p>Constructors do not even have to return the newly created object. Constructor invocation automatically creates a new object, invokes the constructor as a method of that object, and returns the new object. Constructors are written to be invoked as constructors, with the <code>new</code> keyword, and they usually won’t work properly if they are invoked as regular function. <br></p>\n<p>The prototype object is fundamental to the identity of a class: two objects are instances of the same class if and only if they inherit from the same prototype object.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r instance <span class=\"keyword\">of</span> Range <span class=\"comment\">// returns true if r inherits from Range.prototype</span></span><br></pre></td></tr></table></figure></p>\n<p>This <code>instanceof</code> operator does not actually check whether <code>r</code> was initialized by the <code>Range</code> constructor. It checks whether it inherits from <code>Range.prototype</code>.  <br></p>\n<p>Every JS function (except functions returned by the ECMAScript5 <code>Function.bind()</code> method) automatically has a <code>prototype</code> property. The value of this property is an object that has a single nonenumerable <code>constructor</code> property.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#125;</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = F.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = p.constructor;</span><br><span class=\"line\">c === F; <span class=\"comment\">// true: F.prototype.constructor == F for any function</span></span><br></pre></td></tr></table></figure></p>\n<p>The existence of this predefined prototype object with its <code>constructor</code> property means that objects typically inherit a <code>constructor</code> prototype that refers to their constructor. <br></p>\n<p><img src=\"../images/js_class_constructor_prototype.png\" alt=\"js_calss_constructor_prototype\"></p>\n<p>The Range class defined above do not have a <code>constructor</code> property. We can remedy this problem by explicitly adding a constructor to the prototype.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Range, // explicitly set the <span class=\"keyword\">constructor</span> back-reference</span><br><span class=\"line\">    includes: function(x) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to; &#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from); x &lt;= <span class=\"keyword\">this</span>.to; x++) f(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Another common technique is to use the predefined prototype object with its <code>constructor</code> property.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Extend the predefined Range.prototype object so we don't overwrite</span></span><br><span class=\"line\"><span class=\"comment\">// the automatically created Range.prototype.constructor property.</span></span><br><span class=\"line\">Range.prototype.includes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from&lt;=x &amp;&amp; x&lt;=<span class=\"keyword\">this</span>.to; &#125;;</span><br><span class=\"line\">Range.prototype.foreach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from); x &lt;= <span class=\"keyword\">this</span>.to; x++) f(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Range.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Java-Style-Classes-in-JS\"><a href=\"#Java-Style-Classes-in-JS\" class=\"headerlink\" title=\"Java-Style Classes in JS\"></a>Java-Style Classes in JS</h3><p>Four kinds of class members:</p>\n<ul>\n<li><em>Instance fields</em> : the per-instance properties or variables that hold the state of individual objects.</li>\n<li><em>Instance methods</em> : shared by all instances of the class that are invoked through individual instances.</li>\n<li><em>Class fields</em> : properties or variables associated with the class rather than the instances of the class</li>\n<li><em>Class methods</em> : methods that are associated with the class rather than with the instances. </li>\n</ul>\n<p>In JS, there are 3 different objects involved in any class definition, and the properties of these three object act like different kinds of class members:</p>\n<ul>\n<li><em>Constructor object</em>: It defines a name for a JS class. Properties you add to this constructor serve as class fields and class methods.</li>\n<li><em>Prototype object</em>: Properties of this object are inherited by all instances of the class, and properties whose values are functions behave like instance methods of the class. </li>\n<li><em>Instance object</em> : Each instance of a class is an object in its own right, and properties defined directly on an instance are not shared by any other instances. Nonfunction properties defined on instances behave as the instance fields of the class. </li>\n</ul>\n<p>We can reduce the process of class definition in JS to a 3-step algorithm.</p>\n<ol>\n<li>write a constructor function that sets instance properties on new objects</li>\n<li>define instance methods on the <code>prototype</code> object of the constructor. </li>\n<li>define class fields and class properties on the constructor itself. </li>\n</ol>\n<h3 id=\"Augmenting-Classes\"><a href=\"#Augmenting-Classes\" class=\"headerlink\" title=\"Augmenting Classes\"></a>Augmenting Classes</h3><p>JS prototype-based inheritance mechanism is dynamic: an object inherits properties from its prototype, even if the prototype changes after the object is created. This means that we can augmetn JS classes simply by adding new methods to their prototype objects.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invoke the function f this many times, passing the iteration number</span></span><br><span class=\"line\"><span class=\"comment\">// For example, to print \"hello\" 3 times:</span></span><br><span class=\"line\"><span class=\"comment\">//     var n = 3;</span></span><br><span class=\"line\"><span class=\"comment\">//     n.times(function(n) &#123; console.log(n + \" hello\"); &#125;);</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.times = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"built_in\">Number</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) f.call(context, i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Define the ES5 String.trim() method if one does not already exist.</span></span><br><span class=\"line\"><span class=\"comment\">// This method returns a string with whitespace removed from the start and end.</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"built_in\">String</span>.prototype.trim || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;                <span class=\"comment\">// Don't alter the empty string</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>, <span class=\"string\">\"\"</span>); <span class=\"comment\">// Regular expression magic</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Return a function's name.  If it has a (nonstandard) name property, use it.</span></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, convert the function to a string and extract the name from that.</span></span><br><span class=\"line\"><span class=\"comment\">// Returns an empty string for unnamed functions like itself.</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name || <span class=\"keyword\">this</span>.toString().match(<span class=\"regexp\">/function\\s*([^(]*)\\(/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Classes-and-Types\"><a href=\"#Classes-and-Types\" class=\"headerlink\" title=\"Classes and Types\"></a>Classes and Types</h3><p>Three techniques for determining the class of an arbitrary object: the <code>instanceof</code> operator, the <code>constructor</code> property, and the name of the constructor function.  <br><br>The expression <code>o instanceof c</code> evaluates to <code>true</code> if <code>o</code> inherits from <code>c.prototype</code>. The inheritance need not be direct. If <code>o</code> inherits from an object that inherits from an object that inherits from <code>c.prototype</code>, the expression will still evaluate to <code>true</code>.<br>Constructors act as the public identity of classes, but prototypes are the fundamental identity. Despite the use of a constructor function with <code>instanceof</code>, this operator is really testing what an object inherits from, not what constructor was used to creat it. If you want to test the prototype chain of an object for a specific prototype object and do not want to use the constructor function as an intermediary, you can use the <code>isPrototypeOf()</code> method. <br><br>Two arrays created in two different frames inherit from two identical but distinct prototype objects, and an array created in one frame is not instance of the <code>Array()</code> constructor of another frame. <br></p>\n<p>Another way to identify the class of an object is to simply use the <code>constructor</code> property. Since constructors are the public face of classes, this is a straightforward approach.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeAndValue</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (x.constructor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Number</span>: <span class=\"keyword\">return</span> <span class=\"string\">\"Number: \"</span> + x;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">String</span>: <span class=\"keyword\">return</span> <span class=\"string\">\"String: \"</span> + x;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">Date</span>: <span class=\"keyword\">return</span> <span class=\"string\">\"Date: \"</span> + x;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">RegExp</span>: <span class=\"keyword\">return</span> <span class=\"string\">\"RegExp: \"</span> + x;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Complex: <span class=\"keyword\">return</span> <span class=\"string\">\"Complex: \"</span> + x;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// expression after case are functions</span></span><br></pre></td></tr></table></figure></p>\n<p>If we were using the <code>typeof</code> operator or extracting the <em>class</em> attribute of the object, they would be strings instead. This technique of using the <code>constructor</code> property won’t work when there are multiple execution contexts that share values. <br></p>\n<p>One possible workaround for multiple execution contexts is to use the name of the constructor function as the class identifier rather than the function itself. <br></p>\n<p>Instead of asking “what is the class of this object?” we ask instead, “what can this object do?” This approach to programming is common in language like Python and Ruby and is called <em>duck typing</em>. As an example, recall the discussion of array-like objects, in many circumstances, we don’t need to know whether an object is a true instance of the Array class: it is enough to know that it has a nonnegative integer <code>length</code> proeprty. More typically, however, when we talk about duck-typing, we’are talking about testing whether an object implements one or more methods. </p>\n<h3 id=\"Object-Oriented-Techniques-in-JS\"><a href=\"#Object-Oriented-Techniques-in-JS\" class=\"headerlink\" title=\"Object-Oriented Techniques in JS\"></a>Object-Oriented Techniques in JS</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An arbitrary set of values</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = &#123;&#125;; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>. n = <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// All arguments are values to add</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add each of the arguments to the set.</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"built_in\">Set</span>._v2s(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.values.hasOwnProperty(str)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.values[str] = val;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Remove each of the arguments from the set.</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;  <span class=\"comment\">// For each argument</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"built_in\">Set</span>._v2s(<span class=\"built_in\">arguments</span>[i]);        <span class=\"comment\">// Map to a string</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.values.hasOwnProperty(str)) &#123;   <span class=\"comment\">// If it is in the set</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.values[str];             <span class=\"comment\">// Delete it</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.n--;                            <span class=\"comment\">// Decrease set size</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;                                 <span class=\"comment\">// For method chaining</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Return true if the set contains value; false otherwise.</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.contains = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.values.hasOwnProperty(<span class=\"built_in\">Set</span>._v2s(value));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Return the size of the set.</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.n; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Call function f on the specified context for each element of the set. </span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.foreach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, conetxt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.values )</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.values.hasOwnProperty(s))</span><br><span class=\"line\">            f.call(context, <span class=\"keyword\">this</span>.values[s]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Set</span>._v2s = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">undefined</span>: <span class=\"keyword\">return</span> <span class=\"string\">'u'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">null</span>: <span class=\"keyword\">return</span> <span class=\"string\">'n'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">true</span>: <span class=\"keyword\">return</span> <span class=\"string\">'t'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"literal\">false</span>: <span class=\"keyword\">return</span> <span class=\"string\">'f'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"keyword\">switch</span>(<span class=\"keyword\">typeof</span> val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'#'</span> + val;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>: <span class=\"keyword\">return</span> <span class=\"string\">'\"'</span> + val;</span><br><span class=\"line\">            <span class=\"comment\">// objs and funs get @</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">return</span> <span class=\"string\">'@'</span> + objectId(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectId</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prop = <span class=\"string\">\"|**objectid**|\"</span>;   <span class=\"comment\">// Private property name for storing ids</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!o.hasOwnProperty(prop))</span><br><span class=\"line\">            o[[prop] = <span class=\"built_in\">Set</span>._v2s.next++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o[prop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Set</span>._v2s.next = <span class=\"number\">100</span>; <span class=\"comment\">// Strat assigning object ids at this value</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Enumerated-Types\"><a href=\"#Enumerated-Types\" class=\"headerlink\" title=\"Enumerated Types\"></a>Enumerated Types</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example of enumerated type</span></span><br><span class=\"line\"><span class=\"comment\">// Create a new Coin class with four values: Coin.Penny, Coin.Nickel, etc.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Coin = enumeration(&#123;<span class=\"attr\">Penny</span>: <span class=\"number\">1</span>, <span class=\"attr\">Nickel</span>:<span class=\"number\">5</span>, <span class=\"attr\">Dime</span>:<span class=\"number\">10</span>, <span class=\"attr\">Quarter</span>:<span class=\"number\">25</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = Coin.Dime;                   <span class=\"comment\">// This is an instance of the new class</span></span><br><span class=\"line\">c <span class=\"keyword\">instanceof</span> Coin                    <span class=\"comment\">// =&gt; true: instanceof works</span></span><br><span class=\"line\">c.constructor == Coin                <span class=\"comment\">// =&gt; true: constructor property works</span></span><br><span class=\"line\">Coin.Quarter + <span class=\"number\">3</span>*Coin.Nickel         <span class=\"comment\">// =&gt; 40: values convert to numbers</span></span><br><span class=\"line\">Coin.Dime == <span class=\"number\">10</span>                      <span class=\"comment\">// =&gt; true: more conversion to numbers</span></span><br><span class=\"line\">Coin.Dime &gt; Coin.Nickel              <span class=\"comment\">// =&gt; true: relational operators work</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(Coin.Dime) + <span class=\"string\">\":\"</span> + Coin.Dime  <span class=\"comment\">// =&gt; \"Dime:10\": coerce to string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Enumerated types in JS */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This function creates a new enumerated type.  The argument object specifies</span></span><br><span class=\"line\"><span class=\"comment\">// the names and values of each instance of the class. The return value</span></span><br><span class=\"line\"><span class=\"comment\">// is a constructor function that identifies the new class.  Note, however</span></span><br><span class=\"line\"><span class=\"comment\">// that the constructor throws an exception: you can't use it to create new</span></span><br><span class=\"line\"><span class=\"comment\">// instances of the type.  The returned constructor has properties that</span></span><br><span class=\"line\"><span class=\"comment\">// map the name of a value to the value itself, and also a values array,</span></span><br><span class=\"line\"><span class=\"comment\">// a foreach() iterator function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enumeration</span>(<span class=\"params\">namesToValues</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> enumeration = <span class=\"function\"><span class=\"keyword\">function</span> </span>&#123; <span class=\"keyword\">throw</span> <span class=\"string\">\"Can't instantiate enumerations\"</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enumerated values inherit from this object</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> proto = enumeration.prototype = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>: enumeration,                   // Identify type</span><br><span class=\"line\">        toString: function() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;, <span class=\"comment\">// Return name</span></span><br><span class=\"line\">        valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value; &#125;, <span class=\"comment\">// Return value</span></span><br><span class=\"line\">        toJSON: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;    <span class=\"comment\">// For serialization</span></span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\"></span><br><span class=\"line\">    enumeration.values = [];  <span class=\"comment\">// An array of the enumerated value objects</span></span><br><span class=\"line\">    <span class=\"comment\">// Now create the instances of this new type.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(name <span class=\"keyword\">in</span> namesToValues) &#123;         <span class=\"comment\">// For each value</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = inherit(proto);          <span class=\"comment\">// Create an object to represent it</span></span><br><span class=\"line\">        e.name = name;                   <span class=\"comment\">// Give it a name</span></span><br><span class=\"line\">        e.value = namesToValues[name];   <span class=\"comment\">// And a value</span></span><br><span class=\"line\">        enumeration[name] = e;           <span class=\"comment\">// Make it a property of constructor</span></span><br><span class=\"line\">        enumeration.values.push(e);      <span class=\"comment\">// And store in the values array</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A class method for iterating the instances of the class</span></span><br><span class=\"line\">    enumeration.foreach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f,c</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.values.length; i++) f.call(c,<span class=\"keyword\">this</span>.values[i]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Return the constructor that identifies the new type</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enumeration;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Representing cards with enumerated types</span></span><br><span class=\"line\"><span class=\"comment\">// Define a class to represent a playing card</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Card</span>(<span class=\"params\">suit, rank</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suit = suit;         <span class=\"comment\">// Each card has a suit</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rank = rank;         <span class=\"comment\">// and a rank</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// These enumerated types define the suit and rank values</span></span><br><span class=\"line\">Card.Suit = enumeration(&#123;<span class=\"attr\">Clubs</span>: <span class=\"number\">1</span>, <span class=\"attr\">Diamonds</span>: <span class=\"number\">2</span>, <span class=\"attr\">Hearts</span>:<span class=\"number\">3</span>, <span class=\"attr\">Spades</span>:<span class=\"number\">4</span>&#125;);</span><br><span class=\"line\">Card.Rank = enumeration(&#123;<span class=\"attr\">Two</span>: <span class=\"number\">2</span>, <span class=\"attr\">Three</span>: <span class=\"number\">3</span>, <span class=\"attr\">Four</span>: <span class=\"number\">4</span>, <span class=\"attr\">Five</span>: <span class=\"number\">5</span>, <span class=\"attr\">Six</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                         Seven: <span class=\"number\">7</span>, <span class=\"attr\">Eight</span>: <span class=\"number\">8</span>, <span class=\"attr\">Nine</span>: <span class=\"number\">9</span>, <span class=\"attr\">Ten</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">                         Jack: <span class=\"number\">11</span>, <span class=\"attr\">Queen</span>: <span class=\"number\">12</span>, <span class=\"attr\">King</span>: <span class=\"number\">13</span>, <span class=\"attr\">Ace</span>: <span class=\"number\">14</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Define a textual representation for a card</span></span><br><span class=\"line\">Card.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rank.toString() + <span class=\"string\">\" of \"</span> + <span class=\"keyword\">this</span>.suit.toString();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Compare the value of two cards as you would in poker</span></span><br><span class=\"line\">Card.prototype.compareTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rank &lt; that.rank) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rank &gt; that.rank) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// A function for ordering cards as you would in poker</span></span><br><span class=\"line\">Card.orderByRank = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123; <span class=\"keyword\">return</span> a.compareTo(b); &#125;;</span><br><span class=\"line\"><span class=\"comment\">// A function for ordering cards as you would in bridge</span></span><br><span class=\"line\">Card.orderBySuit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.suit &lt; b.suit) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.suit &gt; b.suit) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.rank &lt; b.rank) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.rank &gt; b.rank) <span class=\"keyword\">return</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Define a class to represent a standard deck of cards</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Deck</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cards = <span class=\"keyword\">this</span>.cards = [];     <span class=\"comment\">// A deck is just an array of cards</span></span><br><span class=\"line\">    Card.Suit.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;  <span class=\"comment\">// Initialize the array</span></span><br><span class=\"line\">                          Card.Rank.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">                                                cards.push(<span class=\"keyword\">new</span> Card(s,r));</span><br><span class=\"line\">                                            &#125;);</span><br><span class=\"line\">                      &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Shuffle method: shuffles cards in place and returns the deck</span></span><br><span class=\"line\">Deck.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// For each element in the array, swap with a randomly chosen lower element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deck = <span class=\"keyword\">this</span>.cards, len = deck.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = len<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> r = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>)), temp;     <span class=\"comment\">// Random number</span></span><br><span class=\"line\">        temp = deck[i], deck[i] = deck[r], deck[r] = temp; <span class=\"comment\">// Swap</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Deal method: returns an array of cards</span></span><br><span class=\"line\">Deck.prototype.deal = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cards.length &lt; n) <span class=\"keyword\">throw</span> <span class=\"string\">\"Out of cards\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.cards.splice(<span class=\"keyword\">this</span>.cards.length-n, n);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Create a new deck of cards, shuffle it, and deal a bridge hand</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deck = (<span class=\"keyword\">new</span> Deck()).shuffle();</span><br><span class=\"line\"><span class=\"keyword\">var</span> hand = deck.deal(<span class=\"number\">13</span>).sort(Card.orderBySuit);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Comparison-Methods\"><a href=\"#Comparison-Methods\" class=\"headerlink\" title=\"Comparison Methods\"></a>Comparison Methods</h4><p>To enable instances of your class to be tested for equality, define an instance method naemd <code>equal()</code>. It should take a single argument and  return <code>true</code> if that arguments is equal to the object it is invoked on. <br><br>Defining an <code>equals()</code> method for Set class is somewhat trickier. We can’t just compare the values property of two sets but must perform is deeper comparison.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Shortcut for trivial case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === that) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// If the that object is not a set, it is not equal to this one.</span></span><br><span class=\"line\">    <span class=\"comment\">// We use instanceof to allow any subclass of Set.</span></span><br><span class=\"line\">    <span class=\"comment\">// We could relax this test if we wanted true duck-typing.</span></span><br><span class=\"line\">    <span class=\"comment\">// Or we could strengthen it to check this.constructor == that.constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// Note that instanceof properly rejects null and undefined values</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(that <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Set</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If two sets don't have the same size, they're not equal</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size() != that.size()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Now check whether every element in this is also in that.</span></span><br><span class=\"line\">    <span class=\"comment\">// Use an exception to break out of the foreach if the sets are not equal.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.foreach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123; <span class=\"keyword\">if</span> (!that.contains(v)) <span class=\"keyword\">throw</span> <span class=\"literal\">false</span>; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                    <span class=\"comment\">// All elements matched: sets are equal.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x === <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// An element in this is not in that.</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> x;                        <span class=\"comment\">// Some other exception: rethrow it.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>If you try to use objects with JS’s relation operators, such as &lt; and &lt;=, JS first calls the <code>valueOf()</code> method of the objects and, if this method returns primitive values, compare those values. To compare objects of these types according to the explicitly define ordering of your own choosing, you can define a method named <code>comparedTo()</code>. The <code>Array.sort()</code> method accepts as an optional argument a comparison function that uses the same return-value conventions as the <code>compareTo()</code> method. </p>\n<p><img src=\"../images/compare_function.png\" alt=\"compare_function\"></p>\n<h4 id=\"Private-State\"><a href=\"#Private-State\" class=\"headerlink\" title=\"Private State\"></a>Private State</h4><p>It is often a gola to encapsulate or hide the state of an object within the object, allowing access to that state only through the methods of the object, and now allowing the important state variables to be read or written directly. <br><br>We can approximate private instance fields using variables captured in the closure of the constructor invocation that creates an instance. We define functions inside the consturctor and assign those functions to properties of the newly created object.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weakly encapsulated endpoints</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Range</span>(<span class=\"params\">from, to</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Don't store the endpoints as properties of this object. Instead</span></span><br><span class=\"line\">    <span class=\"comment\">// define accessor functions that return the endpoint values.</span></span><br><span class=\"line\">    <span class=\"comment\">// These values are stored in the closure.</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.from = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">from</span>; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.to = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> to; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The methods on the prototype can't see the endpoints directly: they have</span></span><br><span class=\"line\"><span class=\"comment\">// to invoke the accessor methods just like everyone else.</span></span><br><span class=\"line\">Range.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: Range,</span><br><span class=\"line\">    includes: function(x) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.from() &lt;= x &amp;&amp; x &lt;= <span class=\"keyword\">this</span>.to(); &#125;,</span><br><span class=\"line\">    foreach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x=<span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.from()), max=<span class=\"keyword\">this</span>.to(); x &lt;= max; x++) f(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + <span class=\"keyword\">this</span>.from() + <span class=\"string\">\"...\"</span> + <span class=\"keyword\">this</span>.to() + <span class=\"string\">\")\"</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Constructor-Overloading-and-Factory-Methods\"><a href=\"#Constructor-Overloading-and-Factory-Methods\" class=\"headerlink\" title=\"Constructor Overloading and Factory Methods\"></a>Constructor Overloading and Factory Methods</h3><p>Sometimes we want to allow objects to be initialized in more than one way. One way to do this is to overload the constructor and have it perform different kinds of initialization depending on the arguments it is passed.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.n = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length == <span class=\"number\">1</span> &amp;&amp; isArrayLike(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.add.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Instead, we can write a factory method - a class method that returns an instance of the class.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Complex.polar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, theta</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Complex(r*<span class=\"built_in\">Math</span>.cos(theta), r*<span class=\"built_in\">Math</span>.sin(theta));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Set</span>.fromArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">    s.add.apply(s,a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"Web Worker","slug":"web-worker"},"next":{"title":"Javascript: Functions","slug":"js-functions"},"link":"https://whitefusion.github.io/post/js-class-1"}
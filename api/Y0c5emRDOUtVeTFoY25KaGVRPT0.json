{"title":"Javascript: Array","date":"2018-08-04T01:53:47.000Z","excerpt":"","slug":"JS-array","comments":true,"tags":["javascript","note"],"categories":["language core"],"updated":"2018-08-04T07:19:01.668Z","content":"<blockquote>\n<p>This is the reading note for “Chapter 7: Array, values and variables, Javascript: The definitive guide 5th edition”. <br></p>\n</blockquote>\n<p>An <em>array</em> is an ordered collection of values. Each value is called an <em>element</em>, and each element has a numeric position in the array, known as its <em>index</em>. JS arrays are <em>untyped</em>: an array element may be of any type, and different elements of the same array may be of different types. JS arrays are <em>zero-based</em> and use 32-bit indexes: the index of the first element is 0, and the highest possible index is 2^32-2. JS arrays are <em>dynamic</em>: they grow and shrink as needed and there is no need to declare a fixed size for the array when you create it or to reallocate it when the size changes. JS arrays may be sparse: the elements need not have contiguous indexes and there may be gaps. Every JS array has a <code>length</code> property. For sparse arrays, <code>length</code> is larger than the index of all elements. <br></p>\n<p>JS arrays are a specialized form of JS object, and arrays indexes are really little more than property names that happen to be integers. Implementations typiucally optimize arrays so that access to numerically indexed array elements is generally significantly faster than access to regular object properties. <br></p>\n<p>You can determine whether an object is array or not, you can use <code>Array.isArray()</code>. The <code>typeof</code> operator does not help here: it returns ‘object’ for arrays. The <code>instanceof</code> operator works in simple cases.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">(&#123;&#125;) <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>Arrays inherit properties from <code>Array.prototype</code>. Most of these methods are <code>generic</code>, which means that they work correctly not only for true arrays, but for any ‘array-like object’. </p>\n<h3 id=\"Creating-arrays-amp-Reading-and-Writing-Array-Elements\"><a href=\"#Creating-arrays-amp-Reading-and-Writing-Array-Elements\" class=\"headerlink\" title=\"Creating arrays &amp; Reading and Writing Array Elements\"></a>Creating arrays &amp; Reading and Writing Array Elements</h3><p>If you omit a value from array literal, the omitted element is given the value <code>undefined</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = [<span class=\"number\">1</span>,,<span class=\"number\">3</span>]; <span class=\"comment\">// an array with 3 elements, the middle one is undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> undefs = [,,]; <span class=\"comment\">// an array with two elements, both undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>Array literal syntax allows an optional trailing comma, so <code>[,,]</code> has only two elements. <br></p>\n<p>Another way is <code>Array()</code> constructor. It can be invoked with 3 distinct ways:</p>\n<ul>\n<li>Call it with no arguments:  <code>var a = new Array();</code> . It equivalent to the array literal <code>[]</code>.</li>\n<li>Call it with a single numeric argument, which specifies a length: <code>var a = new Array(10);</code> It can be used to preallocate an array when you know in advance how many elements will be required. </li>\n<li>Explicitly specify two or more array elements or a single non-numeric element for the array: <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"string\">'testing'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>You access an element of an array using the <code>[]</code> operator. The array is a specialized kind of object. JS convert the numeric array index you specify to a string. You can also do this on an object like:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o = &#123;&#125;;</span><br><span class=\"line\">o[<span class=\"number\">1</span>] = <span class=\"string\">'one'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>It is helpful to clearly distinguish an <em>array index</em> from an <em>object property name</em>. All indexes are property names, but only property names that are integers between 0 and 2^32-1 are indexes. All arrays are objects, and you can create properties of any name on them. If you use properties that are array indexes, however, arrays have the special behavior of updating their <em>length</em> property as needed. <br></p>\n<p>You can index an array using numbers that are negative or that are not integers. When you do this, the number is converted to a string, and that string is used as the property name. Since the name is not a non-negative integer, it is treated as a regular object property, not an array index. Also, if you index an array with a string that happens to be a non-negative integer, it behaves as an array index.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"number\">-1.23</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// This creates a property named '-1.23'</span></span><br><span class=\"line\">a[<span class=\"string\">'1000'</span>] = <span class=\"number\">0</span>; <span class=\"comment\">// The 1001st element of that array</span></span><br><span class=\"line\">a[<span class=\"number\">1.000</span>] = <span class=\"number\">13</span>; <span class=\"comment\">// array index 1, same as a[1]</span></span><br></pre></td></tr></table></figure></p>\n<p>The fact that array indexes are simply a speical type of object property name means that JS arrays have no notion of an ‘out of bound’ error. When you try to query a nonexistent property of any object, you don’t get an error, you simply get <code>undefined</code>. In ECMA5, they can even have array elements defined by getter and setter methods. </p>\n<h3 id=\"Sparse-Arrays\"><a href=\"#Sparse-Arrays\" class=\"headerlink\" title=\"Sparse Arrays\"></a>Sparse Arrays</h3><p>A <em>sparse</em> array is one in which the elements do not have contiguous indexes starting at 0. If the array is sparse, the value of the <code>length</code> property is greater than the number of elements. Sparse arrays can be created with the <code>Array()</code> constructor or simply by assigning to an array index larger than the current array <code>length</code>.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>); </span><br><span class=\"line\">a = [];</span><br><span class=\"line\">a[<span class=\"number\">1000</span>] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></p>\n<p>Note that when you omit value in an array literal, you are not creating a sparse array. The omitted element exists in the array and has the value <code>undefined</code>. This is subtly different than array elements that do not exist at all. You can detect the difference between these two cases with the <code>in</code> operator:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = [,,,]; </span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>); </span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> a1 <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> a2 <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p>If you do have to work with a sparse array, your code will probably treat it just as it would treat a nonsparse with <code>undefined</code> elements. <br></p>\n<h3 id=\"Array-Length\"><a href=\"#Array-Length\" class=\"headerlink\" title=\"Array Length\"></a>Array Length</h3><p>Every array has a <code>length</code> property, and it is this property that makes arrays different from regular JS objects. If you set the <code>length</code> property to a non-negative integer <code>n</code> smaller than its current value, any array elements whose index is greater than or equal to <code>n</code> are deleted.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">a.length = <span class=\"number\">3</span>; <span class=\"comment\">// a is now [1,2,3]</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>; <span class=\"comment\">// a is []</span></span><br><span class=\"line\">a.length = <span class=\"number\">5</span>; <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure></p>\n<p>You can also set <code>length</code> property of an array to a value larger than its current value. It simply creates a sparse area at the end of the array. You can make the <code>length</code> property of an array read-only with <code>Object.defineProperty()</code>.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a , <span class=\"string\">'length'</span>, &#123;<span class=\"attr\">writable</span>: <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">a.length(<span class=\"number\">0</span>); <span class=\"comment\">// a is unchanged.</span></span><br></pre></td></tr></table></figure></p>\n<p>Similarly, if you make an array element nonconfigurable, it cannot be deleted. If it cannot be deleted, then the <code>length</code> property cannot be set to less than the index of the nonconfigurable element. </p>\n<h2 id=\"Adding-and-Deleting-Array-Elements\"><a href=\"#Adding-and-Deleting-Array-Elements\" class=\"headerlink\" title=\"Adding and Deleting Array Elements\"></a>Adding and Deleting Array Elements</h2><p>The simplest way to add elements to an array is just assigning values to new indexes:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [];</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"string\">'zero'</span>;</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">'one'</span>;</span><br><span class=\"line\">a.push(<span class=\"string\">'zero'</span>);</span><br><span class=\"line\">a.push(<span class=\"string\">'one'</span>,<span class=\"string\">'two'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>You can also use the <code>push()</code> method to add one or more values to the end of an array. <br><br>You can delete array elements with the <code>delete</code> operator, just as you delete object properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">in</span> a; <span class=\"literal\">false</span></span><br><span class=\"line\">a.length <span class=\"comment\">// 3: delete does not affect array length</span></span><br></pre></td></tr></table></figure></p>\n<p>Deleting an array element is similar to assigning <code>undefined</code> to that element. Note that using <code>delete</code> on an array element does not alter the <code>length</code> property and does not shift elements with higher indexes down to fill in the gap that is left by the deleted property. If you delete an element from an array, the array becomes sparse. </p>\n<h3 id=\"Iterating-Arrays\"><a href=\"#Iterating-Arrays\" class=\"headerlink\" title=\"Iterating Arrays\"></a>Iterating Arrays</h3><p>If you want to skip undefined and nonexistent elements, you might write:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[i] === <span class=\"literal\">undefined</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip undefined + nonexistent elements</span></span><br><span class=\"line\">    <span class=\"comment\">// loop body here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you only want to skip indexes for which no array element exists but still want to handle existing undefined elements<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(i <span class=\"keyword\">in</span> a)) <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip nonexistent elements</span></span><br><span class=\"line\">    <span class=\"comment\">// loop body here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>As noted, a <code>for/in</code> loop can return the names of inherited properties, such as the names of methods that have been added to <code>Array.prototype</code>. For this reason you should not use a <code>for/in</code> loop on an array unless you include an additional test to filter out unwanted properties.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!a.hasOwnProperty(i)) <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip inherited properties</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//skip i if it is not a non-negative integer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">String</span>(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.abs(<span class=\"built_in\">Number</span>(i)))) !== i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In particular, if an array has both object properties and array elements, the property names may be returned in the order they werer created, rather than in numeric order. It is best to use a regular <code>for</code> loop instead of <code>for/in</code>.</p>\n<h3 id=\"Multidimensional-Arrays\"><a href=\"#Multidimensional-Arrays\" class=\"headerlink\" title=\"Multidimensional Arrays\"></a>Multidimensional Arrays</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a multidimensional array</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> table = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; table.length; i++)</span><br><span class=\"line\">    table[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; table.length; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (col = <span class=\"number\">0</span>; col &lt; table[row].length; col++) &#123;</span><br><span class=\"line\">        table[row][col] = row*col;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> product = table[<span class=\"number\">5</span>][<span class=\"number\">7</span>]; <span class=\"comment\">// 35</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-Methods\"><a href=\"#Array-Methods\" class=\"headerlink\" title=\"Array Methods\"></a>Array Methods</h3><ul>\n<li>join()<br>The Array.join() method converts all the elements of an array to strings and concatenates them, returning the resulting string. If no separator is specified, a comma is used. <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.join(); <span class=\"comment\">// 1,2,3</span></span><br><span class=\"line\">a.join(<span class=\"string\">\" \"</span>); <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">a.join(<span class=\"string\">\"\"</span>); <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">b.join(<span class=\"string\">'-'</span>); <span class=\"comment\">// ----------</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>The <code>Array.join()</code> method is the inverse of the <code>String.split()</code> method, which creates an array by breaking a string into pieces.</p>\n<ul>\n<li><p>reverse()<br>It reverses the order of the elements of an array and returns the reversed array. It does this in place, in other words, it doesn’t create a new array with the elements rearranged but instead rearranges them in the already existing array. </p>\n</li>\n<li><p>sort()<br><code>Array.sort()</code> sorts the elements of an array in place and returns the sorted array. It sorts the array elements in alphabetical order. If an array contains undefined elements, they are sorted to the end of the array. <br></p>\n</li>\n</ul>\n<p>To sort an array into some order other than alphabetical, you must pass a comparison function as an argument to <code>sort()</code>. if the first argument should appear before the second, the comparison function should return a number less than zero. If the first argument should appear after the seond in the sorted array, the function should return a number greater than zero.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Note the convenient use of unnaned function expressions in this code. </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">33</span>,<span class=\"number\">4</span>,<span class=\"number\">1111</span>,<span class=\"number\">222</span>];</span><br><span class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>concat()<br>The <code>Array.concat()</code> method creates and returns new array that contains the elements of the original array on which <code>concat</code> was invoked, followd by each of the arguments to <code>concat()</code>. If any of these arguments is itself an array, then it is the array elements that are concatenated, not the array itself. Note, however, that <code>concat()</code> does not recursively flatten arrays of arrays. <code>concat()</code> does not modify the array on which it is invoked. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.concat(<span class=\"number\">4</span>,<span class=\"number\">5</span>); <span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\">a.concat([<span class=\"number\">4</span>,<span class=\"number\">5</span>]); <span class=\"comment\">// [1,2,3,4,5]</span></span><br><span class=\"line\">a.concat([<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">6</span>,<span class=\"number\">7</span>]) <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br><span class=\"line\">a.concat(<span class=\"number\">4</span>,[<span class=\"number\">5</span>,[<span class=\"number\">6</span>,<span class=\"number\">7</span>]]) <span class=\"comment\">// [1,2,3,4,5,[6,7]]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>slice()<br>The <code>Array.slice()</code> method returns a <em>slice</em>, or subarray, of the specified array. Its two arguments specify the start and end of the slice to be returned. The element specified by the second element is not included. If only one argument is specified, the returned array contains all elements from the start position to the end of the array. An argument of -1, for example, specifies the last element in the array. Note that <code>slice()</code> does not modify the array on which it is invoked. <br></p>\n</li>\n<li><p>splice()<br>The <code>Array.splice()</code> method is a general-purpose method for inserting or removing elements from an array. <code>splice()</code> can delete elements from an array, insert new elements into an array, or perform both operations at the same time. Elements of the array that come after the insertion or deletion point have their indexes increased or decreased as necessary so that they remain contiguous with the rest of the array. The first argument of <code>splice()</code> specifies the array position at which the insertion and/or deletion is to begin. The second argument specifies the number of elements that should be deleted from the array. It the second argument is omitted, all array elements from the start element to the end of the array are removed. <br></p>\n</li>\n</ul>\n<p><code>splice()</code> returns an array of the deleted elements, or an empty array if no elemetns were deleted. The first two arguments to <code>splice()</code> specify which array elements are to be deleted. These arguments may be followed by any number of additional arguments that specify elements to be inserted into the array.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">a.splice(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);  <span class=\"comment\">// Returns []; a is [1,2,'a','b',3,4,5]</span></span><br><span class=\"line\">a.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>],<span class=\"number\">3</span>);  <span class=\"comment\">// Returns ['a','b']; a is [1,2,[1,2],3,3,4,5]</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>push() and pop()<br>The <code>push()</code> and <code>pop</code>() methods allow you to work with arrays if they were stacks. The <code>push()</code> method appends one or more new elements to the end of an array and return sthe new length of the array. The <code>pop()</code> method does the reverse: it deletes the last element of an array, decrements the array length, and returns the value that it removed. Note that both method modify the array in place rather than produce a modified copy of the array. </p>\n</li>\n<li><p>unshift() and shift()<br>The <code>unshift()</code> and <code>shift()</code> methods behave much like <code>push()</code> and <code>pop()</code>, except that they insert and remove elements from the beginning of an array rather than from the end. <code>unshift()</code> adds elements to the beginning of the array, shift the existing array elements up to higher indexes to make room, and return the new length of the the array.<code>shift()</code> removes and returns the first element of the array, shifting all subsequent elements down one place to occupjy the newly vacant space at the start of the array. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">a.unshift(<span class=\"number\">1</span>); <span class=\"comment\">// a:[1] returns 1</span></span><br><span class=\"line\">a.unshift(<span class=\"number\">3</span>); <span class=\"comment\">// a: [3,1] return 2</span></span><br><span class=\"line\">a.shift() <span class=\"comment\">// a: [1] return 3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Instead of being inserted into the array one at a time, arguments are inserted all at once. This means that they in the resulting array in the same order in which they appeared in the argument list. Had the elements been inserted one at a time, their order would have been reversed. </p>\n<ul>\n<li>toString() and toLocaleString()<br>Note that the output does not include square brackets or any other sort of delimiter around the array value. <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"string\">'c'</span>]].toString() <span class=\"comment\">// 1,2,c</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>]]].toString() <span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>It’s a great way for recursive flatenning !</p>\n<h3 id=\"ECMAScript5-Array-Methods\"><a href=\"#ECMAScript5-Array-Methods\" class=\"headerlink\" title=\"ECMAScript5 Array Methods\"></a>ECMAScript5 Array Methods</h3><p>New array methods are defined for iterating, mapping, filtering, testing, reducing and searching arrays. <br></p>\n<p>It is worth making some generalizations about these methods. First, most of the methods accepts a function as their first argument and invoke that function once for each element. If the array is sparse, the function you pass is not invoked for nonexistent elements. In most cases, the function you supply is invoked with three arguments: the value of the array element, the index of the array element, and the array itself. Most of the ECMAScript5 array methods that accept a function as their first argument accept an optional second arguemnt. If specified, the function is invoked as if it is a method of this second argument. That is, the second argument you pass becomes the value of the <code>this</code> keyword inside of the function you pass. None of the ECMAScript5 array methods modify the array on which they are invoked.</p>\n<ul>\n<li>forEach()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; sum+=value; &#125;);</span><br><span class=\"line\">sum <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v,i,a</span>)</span>&#123; a[i]=v+<span class=\"number\">1</span>; &#125;);</span><br><span class=\"line\">data</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Note that forEach() does not provide a way to terminate iteration before all elements have been passed to the function. That is, there is no equivalent of the <code>break</code> statement you can use with a regular <code>for</code> loop. If you need to terminate early, you must throw an exception, and place the call to forEach within a <code>try</code> block.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foreach</span>(<span class=\"params\">a,f,t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; a.forEach(f,t); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e === foreach.break) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foreach.break = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'StopIteration'</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>map()<br>The <code>map()</code> method passes each element of the array on which it is invoked to the function you specify, and returns an array containing the values returned by that function. If the array is sparse, the returned array will be sparse in the same way: it will have the same length and the same missing elements. </p>\n</li>\n<li><p>filter()<br>The <code>filter()</code> method returns an array containing a subset of the elements of the array on which it is invoked. The function you pass to it should be predicate: a function that returns true or false. Note that <code>filter()</code> skips missing elements in sparse arrays, and that its return value is always dense. To close the gaps in a sparse array, you can do this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dense = sparse.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>And to close gaps and remove undefined and null elements you can use <code>filter</code> like this:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ret = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x !== <span class=\"literal\">undefined</span> &amp;&amp; x != <span class=\"literal\">null</span>; &#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>every() and some()<br>The <code>every()</code> and <code>some()</code> methods are array predicates: they apply a predicate function you specify to the elements of the array, and then return <code>true</code> and <code>false</code>. <br></li>\n</ul>\n<p>The <code>every()</code> method is like the mathematical <code>for all</code> quantifier: it returns true if and only if your predicate function returns <code>true</code> for all elements in the array. <br></p>\n<p>The <code>some()</code> method is like the mathematical <code>there exists</code> quantifier: it returns <code>true</code> if there exists at least one element in the array for which the predicate return <code>true</code>. <br></p>\n<p>Note that both <code>every()</code> and <code>some()</code> stop iterating array elements as soon as they know what value to return. Note also that by mathematical convention, <code>every()</code> returns <code>true</code> and <code>some</code> returns <code>false</code> when invoked on an empty array. </p>\n<ul>\n<li>reduce(), reduceRight()<br>The <code>reduce()</code> and <code>reduceRight()</code> methods combine the elements of an array, using the function you specify, to produce a single value. <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123; <span class=\"keyword\">return</span> (x&gt;y)?x:y;&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>The task to this reduction function is to somehow combine or reduce two values into a single value. Functions used with <code>reduce()</code> are different than the functions used with <code>forEach()</code> and <code>map()</code>. The value, index, and array values are passed as the second, third and fourth arguments. If no initial argument passed, the first element of the array will be used as the initial value. Calling <code>reduce()</code> on an empty array with no initial value argument causes a TypeError. <br></p>\n<p><code>reduceRight()</code> works just like <code>reduce()</code>, except that it processes the array from highest index to lowest (right-to-left).<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2^(3^4)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> big = a.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">acc, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(value, acc);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Note that neither <code>reduce()</code> nor <code>reduceRight()</code> accepts an optional argument that specifies the <code>this</code> value on which the reduction function is to be invoked. <br><br>Consider union from chapter6, we can use <code>reduce()</code> to generalize it and compute the union of any number of objects:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = objects.reduce(union);    <span class=\"comment\">// =&gt; &#123;x:1, y:2, z:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce and reduceRight may yield different results</span></span><br><span class=\"line\"><span class=\"comment\">// on union.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">y</span>:<span class=\"number\">2</span>,<span class=\"attr\">a</span>:<span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">z</span>:<span class=\"number\">3</span>,<span class=\"attr\">a</span>:<span class=\"number\">3</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> leftunion = objects.reduce(union);       <span class=\"comment\">// &#123;x:1, y:2, z:3, a:1&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rightunion = objects.reduceRight(union); <span class=\"comment\">// &#123;x:1, y:2, z:3, a:3&#125;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>indexOf() and lastIndexOf()<br><code>indexOf()</code> and <code>lastIndexOf()</code> search an array for an element with a specified value, and return the index of the first such element found, or -1 if none is found. The first argument is the value to search for. The second argument is optional: it specifies the array index at which to begin to search. Negative values are allowed for the second argument and are treated as an offset from the end of the array. <br><br>The following function searches an array for a specified value and returns an array of all matching indexes. This demonstrates how the second argument to <code>indexOf()</code> can be used to find matches beyond the first. <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findall</span>(<span class=\"params\">a, x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [],</span><br><span class=\"line\">    len = a.length,</span><br><span class=\"line\">    pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos &lt; len) &#123;</span><br><span class=\"line\">        pos = a.indexOf(x , pos); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos === <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        results.push(pos);</span><br><span class=\"line\">        pos = pos + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Array-like-Objects\"><a href=\"#Array-like-Objects\" class=\"headerlink\" title=\"Array-like Objects\"></a>Array-like Objects</h3><p>As we’ve seen, JS arrays have some special features that other objects do not have:</p>\n<ul>\n<li>The <code>length</code> property is automatically updated as new elements are added to the list. </li>\n<li>Setting <code>length</code> to a smaller value truncates the array.</li>\n<li>Arrays inherit useful methods from <code>Array.prototype</code></li>\n<li><p>Arrays have a <em>class</em> attribute of <code>Array</code>.<br>It is often perfectly reasonable to treat any object with a numeric <code>length</code> property and corresponding non-negative integer properties as a kind of array. <br><br>The JS array methods are purposely defined to be generic, so that they work correctly when applied to array-like objects in addition to true arrays. Since array-like objects do not inherit from Array.prototype, you cannot invoke array methods on them directly. You can invoke them indirectly using the <code>Function.call</code> method. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"string\">\"0\"</span>:<span class=\"string\">\"a\"</span>, <span class=\"string\">\"1\"</span>:<span class=\"string\">\"b\"</span>, <span class=\"string\">\"2\"</span>:<span class=\"string\">\"c\"</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;  <span class=\"comment\">// An array-like object</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(a,<span class=\"number\">0</span>) <span class=\"comment\">// ['a','b','c'] true array copy</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Strings As arrays<br>String behaves like read-only arrays. We can apply generic array methods to them.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'Javascript'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.join.call(s, <span class=\"string\">\" \"</span>); <span class=\"comment\">// J a v a s c r i p t</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.filter.call(s,         <span class=\"comment\">// Filter the characters of the string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;                     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.match(<span class=\"regexp\">/[^aeiou]/</span>);    <span class=\"comment\">// Only match nonvowels</span></span><br><span class=\"line\">    &#125;).join(<span class=\"string\">\"\"</span>)                        <span class=\"comment\">// =&gt; \"JvScrpt\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Array methods like <code>push(), sort(), reverse()</code> and <code>splice()</code> modify an array in place and do not work on strings. Attempting to modify a string using an array method does not cause an error: it simply fails silently. </p>\n","next":{"title":"Javascript: Objects","slug":"javascript-objects"},"link":"https://whitefusion.github.io/post/JS-array"}